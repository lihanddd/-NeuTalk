/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Serving_H
#define Serving_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "server_types.h"

namespace chatopera { namespace bot { namespace clause {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ServingIf {
 public:
  virtual ~ServingIf() {}

  /**
   * 词典管理
   * 
   * @param request
   */
  virtual void postCustomDict(Data& _return, const Data& request) = 0;
  virtual void putCustomDict(Data& _return, const Data& request) = 0;
  virtual void getCustomDicts(Data& _return, const Data& request) = 0;
  virtual void getCustomDict(Data& _return, const Data& request) = 0;
  virtual void delCustomDict(Data& _return, const Data& request) = 0;
  virtual void postSysDict(Data& _return, const Data& request) = 0;
  virtual void putSysDict(Data& _return, const Data& request) = 0;
  virtual void getSysDicts(Data& _return, const Data& request) = 0;
  virtual void getSysDict(Data& _return, const Data& request) = 0;
  virtual void refSysDict(Data& _return, const Data& request) = 0;
  virtual void unrefSysDict(Data& _return, const Data& request) = 0;
  virtual void myDicts(Data& _return, const Data& request) = 0;
  virtual void mySysdicts(Data& _return, const Data& request) = 0;
  virtual void putDictWord(Data& _return, const Data& request) = 0;
  virtual void getDictWords(Data& _return, const Data& request) = 0;
  virtual void delDictWord(Data& _return, const Data& request) = 0;
  virtual void hasDictWord(Data& _return, const Data& request) = 0;

  /**
   * 意图
   * 
   * @param request
   */
  virtual void postIntent(Data& _return, const Data& request) = 0;
  virtual void putIntent(Data& _return, const Data& request) = 0;
  virtual void getIntents(Data& _return, const Data& request) = 0;
  virtual void getIntent(Data& _return, const Data& request) = 0;
  virtual void delIntent(Data& _return, const Data& request) = 0;
  virtual void postUtter(Data& _return, const Data& request) = 0;
  virtual void putUtter(Data& _return, const Data& request) = 0;
  virtual void getUtters(Data& _return, const Data& request) = 0;
  virtual void getUtter(Data& _return, const Data& request) = 0;
  virtual void delUtter(Data& _return, const Data& request) = 0;
  virtual void postSlot(Data& _return, const Data& request) = 0;
  virtual void putSlot(Data& _return, const Data& request) = 0;
  virtual void getSlots(Data& _return, const Data& request) = 0;
  virtual void getSlot(Data& _return, const Data& request) = 0;
  virtual void delSlot(Data& _return, const Data& request) = 0;

  /**
   * 对话管理
   * 
   * @param request
   */
  virtual void train(Data& _return, const Data& request) = 0;
  virtual void status(Data& _return, const Data& request) = 0;
  virtual void devver(Data& _return, const Data& request) = 0;
  virtual void prover(Data& _return, const Data& request) = 0;
  virtual void version(Data& _return, const Data& request) = 0;
  virtual void chat(Data& _return, const Data& request) = 0;
  virtual void online(Data& _return, const Data& request) = 0;
  virtual void offline(Data& _return, const Data& request) = 0;
  virtual void putSession(Data& _return, const Data& request) = 0;
  virtual void getSession(Data& _return, const Data& request) = 0;
};

class ServingIfFactory {
 public:
  typedef ServingIf Handler;

  virtual ~ServingIfFactory() {}

  virtual ServingIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ServingIf* /* handler */) = 0;
};

class ServingIfSingletonFactory : virtual public ServingIfFactory {
 public:
  ServingIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<ServingIf>& iface) : iface_(iface) {}
  virtual ~ServingIfSingletonFactory() {}

  virtual ServingIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ServingIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<ServingIf> iface_;
};

class ServingNull : virtual public ServingIf {
 public:
  virtual ~ServingNull() {}
  void postCustomDict(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void putCustomDict(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void getCustomDicts(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void getCustomDict(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void delCustomDict(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void postSysDict(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void putSysDict(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void getSysDicts(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void getSysDict(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void refSysDict(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void unrefSysDict(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void myDicts(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void mySysdicts(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void putDictWord(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void getDictWords(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void delDictWord(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void hasDictWord(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void postIntent(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void putIntent(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void getIntents(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void getIntent(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void delIntent(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void postUtter(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void putUtter(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void getUtters(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void getUtter(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void delUtter(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void postSlot(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void putSlot(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void getSlots(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void getSlot(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void delSlot(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void train(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void status(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void devver(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void prover(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void version(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void chat(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void online(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void offline(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void putSession(Data& /* _return */, const Data& /* request */) {
    return;
  }
  void getSession(Data& /* _return */, const Data& /* request */) {
    return;
  }
};

typedef struct _Serving_postCustomDict_args__isset {
  _Serving_postCustomDict_args__isset() : request(false) {}
  bool request :1;
} _Serving_postCustomDict_args__isset;

class Serving_postCustomDict_args {
 public:

  Serving_postCustomDict_args(const Serving_postCustomDict_args&);
  Serving_postCustomDict_args& operator=(const Serving_postCustomDict_args&);
  Serving_postCustomDict_args() {
  }

  virtual ~Serving_postCustomDict_args() throw();
  Data request;

  _Serving_postCustomDict_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_postCustomDict_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_postCustomDict_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_postCustomDict_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_postCustomDict_pargs {
 public:


  virtual ~Serving_postCustomDict_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_postCustomDict_result__isset {
  _Serving_postCustomDict_result__isset() : success(false) {}
  bool success :1;
} _Serving_postCustomDict_result__isset;

class Serving_postCustomDict_result {
 public:

  Serving_postCustomDict_result(const Serving_postCustomDict_result&);
  Serving_postCustomDict_result& operator=(const Serving_postCustomDict_result&);
  Serving_postCustomDict_result() {
  }

  virtual ~Serving_postCustomDict_result() throw();
  Data success;

  _Serving_postCustomDict_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_postCustomDict_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_postCustomDict_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_postCustomDict_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_postCustomDict_presult__isset {
  _Serving_postCustomDict_presult__isset() : success(false) {}
  bool success :1;
} _Serving_postCustomDict_presult__isset;

class Serving_postCustomDict_presult {
 public:


  virtual ~Serving_postCustomDict_presult() throw();
  Data* success;

  _Serving_postCustomDict_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_putCustomDict_args__isset {
  _Serving_putCustomDict_args__isset() : request(false) {}
  bool request :1;
} _Serving_putCustomDict_args__isset;

class Serving_putCustomDict_args {
 public:

  Serving_putCustomDict_args(const Serving_putCustomDict_args&);
  Serving_putCustomDict_args& operator=(const Serving_putCustomDict_args&);
  Serving_putCustomDict_args() {
  }

  virtual ~Serving_putCustomDict_args() throw();
  Data request;

  _Serving_putCustomDict_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_putCustomDict_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_putCustomDict_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_putCustomDict_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_putCustomDict_pargs {
 public:


  virtual ~Serving_putCustomDict_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_putCustomDict_result__isset {
  _Serving_putCustomDict_result__isset() : success(false) {}
  bool success :1;
} _Serving_putCustomDict_result__isset;

class Serving_putCustomDict_result {
 public:

  Serving_putCustomDict_result(const Serving_putCustomDict_result&);
  Serving_putCustomDict_result& operator=(const Serving_putCustomDict_result&);
  Serving_putCustomDict_result() {
  }

  virtual ~Serving_putCustomDict_result() throw();
  Data success;

  _Serving_putCustomDict_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_putCustomDict_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_putCustomDict_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_putCustomDict_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_putCustomDict_presult__isset {
  _Serving_putCustomDict_presult__isset() : success(false) {}
  bool success :1;
} _Serving_putCustomDict_presult__isset;

class Serving_putCustomDict_presult {
 public:


  virtual ~Serving_putCustomDict_presult() throw();
  Data* success;

  _Serving_putCustomDict_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_getCustomDicts_args__isset {
  _Serving_getCustomDicts_args__isset() : request(false) {}
  bool request :1;
} _Serving_getCustomDicts_args__isset;

class Serving_getCustomDicts_args {
 public:

  Serving_getCustomDicts_args(const Serving_getCustomDicts_args&);
  Serving_getCustomDicts_args& operator=(const Serving_getCustomDicts_args&);
  Serving_getCustomDicts_args() {
  }

  virtual ~Serving_getCustomDicts_args() throw();
  Data request;

  _Serving_getCustomDicts_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_getCustomDicts_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_getCustomDicts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getCustomDicts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_getCustomDicts_pargs {
 public:


  virtual ~Serving_getCustomDicts_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getCustomDicts_result__isset {
  _Serving_getCustomDicts_result__isset() : success(false) {}
  bool success :1;
} _Serving_getCustomDicts_result__isset;

class Serving_getCustomDicts_result {
 public:

  Serving_getCustomDicts_result(const Serving_getCustomDicts_result&);
  Serving_getCustomDicts_result& operator=(const Serving_getCustomDicts_result&);
  Serving_getCustomDicts_result() {
  }

  virtual ~Serving_getCustomDicts_result() throw();
  Data success;

  _Serving_getCustomDicts_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_getCustomDicts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_getCustomDicts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getCustomDicts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getCustomDicts_presult__isset {
  _Serving_getCustomDicts_presult__isset() : success(false) {}
  bool success :1;
} _Serving_getCustomDicts_presult__isset;

class Serving_getCustomDicts_presult {
 public:


  virtual ~Serving_getCustomDicts_presult() throw();
  Data* success;

  _Serving_getCustomDicts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_getCustomDict_args__isset {
  _Serving_getCustomDict_args__isset() : request(false) {}
  bool request :1;
} _Serving_getCustomDict_args__isset;

class Serving_getCustomDict_args {
 public:

  Serving_getCustomDict_args(const Serving_getCustomDict_args&);
  Serving_getCustomDict_args& operator=(const Serving_getCustomDict_args&);
  Serving_getCustomDict_args() {
  }

  virtual ~Serving_getCustomDict_args() throw();
  Data request;

  _Serving_getCustomDict_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_getCustomDict_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_getCustomDict_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getCustomDict_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_getCustomDict_pargs {
 public:


  virtual ~Serving_getCustomDict_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getCustomDict_result__isset {
  _Serving_getCustomDict_result__isset() : success(false) {}
  bool success :1;
} _Serving_getCustomDict_result__isset;

class Serving_getCustomDict_result {
 public:

  Serving_getCustomDict_result(const Serving_getCustomDict_result&);
  Serving_getCustomDict_result& operator=(const Serving_getCustomDict_result&);
  Serving_getCustomDict_result() {
  }

  virtual ~Serving_getCustomDict_result() throw();
  Data success;

  _Serving_getCustomDict_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_getCustomDict_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_getCustomDict_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getCustomDict_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getCustomDict_presult__isset {
  _Serving_getCustomDict_presult__isset() : success(false) {}
  bool success :1;
} _Serving_getCustomDict_presult__isset;

class Serving_getCustomDict_presult {
 public:


  virtual ~Serving_getCustomDict_presult() throw();
  Data* success;

  _Serving_getCustomDict_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_delCustomDict_args__isset {
  _Serving_delCustomDict_args__isset() : request(false) {}
  bool request :1;
} _Serving_delCustomDict_args__isset;

class Serving_delCustomDict_args {
 public:

  Serving_delCustomDict_args(const Serving_delCustomDict_args&);
  Serving_delCustomDict_args& operator=(const Serving_delCustomDict_args&);
  Serving_delCustomDict_args() {
  }

  virtual ~Serving_delCustomDict_args() throw();
  Data request;

  _Serving_delCustomDict_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_delCustomDict_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_delCustomDict_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_delCustomDict_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_delCustomDict_pargs {
 public:


  virtual ~Serving_delCustomDict_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_delCustomDict_result__isset {
  _Serving_delCustomDict_result__isset() : success(false) {}
  bool success :1;
} _Serving_delCustomDict_result__isset;

class Serving_delCustomDict_result {
 public:

  Serving_delCustomDict_result(const Serving_delCustomDict_result&);
  Serving_delCustomDict_result& operator=(const Serving_delCustomDict_result&);
  Serving_delCustomDict_result() {
  }

  virtual ~Serving_delCustomDict_result() throw();
  Data success;

  _Serving_delCustomDict_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_delCustomDict_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_delCustomDict_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_delCustomDict_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_delCustomDict_presult__isset {
  _Serving_delCustomDict_presult__isset() : success(false) {}
  bool success :1;
} _Serving_delCustomDict_presult__isset;

class Serving_delCustomDict_presult {
 public:


  virtual ~Serving_delCustomDict_presult() throw();
  Data* success;

  _Serving_delCustomDict_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_postSysDict_args__isset {
  _Serving_postSysDict_args__isset() : request(false) {}
  bool request :1;
} _Serving_postSysDict_args__isset;

class Serving_postSysDict_args {
 public:

  Serving_postSysDict_args(const Serving_postSysDict_args&);
  Serving_postSysDict_args& operator=(const Serving_postSysDict_args&);
  Serving_postSysDict_args() {
  }

  virtual ~Serving_postSysDict_args() throw();
  Data request;

  _Serving_postSysDict_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_postSysDict_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_postSysDict_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_postSysDict_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_postSysDict_pargs {
 public:


  virtual ~Serving_postSysDict_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_postSysDict_result__isset {
  _Serving_postSysDict_result__isset() : success(false) {}
  bool success :1;
} _Serving_postSysDict_result__isset;

class Serving_postSysDict_result {
 public:

  Serving_postSysDict_result(const Serving_postSysDict_result&);
  Serving_postSysDict_result& operator=(const Serving_postSysDict_result&);
  Serving_postSysDict_result() {
  }

  virtual ~Serving_postSysDict_result() throw();
  Data success;

  _Serving_postSysDict_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_postSysDict_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_postSysDict_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_postSysDict_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_postSysDict_presult__isset {
  _Serving_postSysDict_presult__isset() : success(false) {}
  bool success :1;
} _Serving_postSysDict_presult__isset;

class Serving_postSysDict_presult {
 public:


  virtual ~Serving_postSysDict_presult() throw();
  Data* success;

  _Serving_postSysDict_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_putSysDict_args__isset {
  _Serving_putSysDict_args__isset() : request(false) {}
  bool request :1;
} _Serving_putSysDict_args__isset;

class Serving_putSysDict_args {
 public:

  Serving_putSysDict_args(const Serving_putSysDict_args&);
  Serving_putSysDict_args& operator=(const Serving_putSysDict_args&);
  Serving_putSysDict_args() {
  }

  virtual ~Serving_putSysDict_args() throw();
  Data request;

  _Serving_putSysDict_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_putSysDict_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_putSysDict_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_putSysDict_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_putSysDict_pargs {
 public:


  virtual ~Serving_putSysDict_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_putSysDict_result__isset {
  _Serving_putSysDict_result__isset() : success(false) {}
  bool success :1;
} _Serving_putSysDict_result__isset;

class Serving_putSysDict_result {
 public:

  Serving_putSysDict_result(const Serving_putSysDict_result&);
  Serving_putSysDict_result& operator=(const Serving_putSysDict_result&);
  Serving_putSysDict_result() {
  }

  virtual ~Serving_putSysDict_result() throw();
  Data success;

  _Serving_putSysDict_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_putSysDict_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_putSysDict_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_putSysDict_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_putSysDict_presult__isset {
  _Serving_putSysDict_presult__isset() : success(false) {}
  bool success :1;
} _Serving_putSysDict_presult__isset;

class Serving_putSysDict_presult {
 public:


  virtual ~Serving_putSysDict_presult() throw();
  Data* success;

  _Serving_putSysDict_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_getSysDicts_args__isset {
  _Serving_getSysDicts_args__isset() : request(false) {}
  bool request :1;
} _Serving_getSysDicts_args__isset;

class Serving_getSysDicts_args {
 public:

  Serving_getSysDicts_args(const Serving_getSysDicts_args&);
  Serving_getSysDicts_args& operator=(const Serving_getSysDicts_args&);
  Serving_getSysDicts_args() {
  }

  virtual ~Serving_getSysDicts_args() throw();
  Data request;

  _Serving_getSysDicts_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_getSysDicts_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_getSysDicts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getSysDicts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_getSysDicts_pargs {
 public:


  virtual ~Serving_getSysDicts_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getSysDicts_result__isset {
  _Serving_getSysDicts_result__isset() : success(false) {}
  bool success :1;
} _Serving_getSysDicts_result__isset;

class Serving_getSysDicts_result {
 public:

  Serving_getSysDicts_result(const Serving_getSysDicts_result&);
  Serving_getSysDicts_result& operator=(const Serving_getSysDicts_result&);
  Serving_getSysDicts_result() {
  }

  virtual ~Serving_getSysDicts_result() throw();
  Data success;

  _Serving_getSysDicts_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_getSysDicts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_getSysDicts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getSysDicts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getSysDicts_presult__isset {
  _Serving_getSysDicts_presult__isset() : success(false) {}
  bool success :1;
} _Serving_getSysDicts_presult__isset;

class Serving_getSysDicts_presult {
 public:


  virtual ~Serving_getSysDicts_presult() throw();
  Data* success;

  _Serving_getSysDicts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_getSysDict_args__isset {
  _Serving_getSysDict_args__isset() : request(false) {}
  bool request :1;
} _Serving_getSysDict_args__isset;

class Serving_getSysDict_args {
 public:

  Serving_getSysDict_args(const Serving_getSysDict_args&);
  Serving_getSysDict_args& operator=(const Serving_getSysDict_args&);
  Serving_getSysDict_args() {
  }

  virtual ~Serving_getSysDict_args() throw();
  Data request;

  _Serving_getSysDict_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_getSysDict_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_getSysDict_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getSysDict_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_getSysDict_pargs {
 public:


  virtual ~Serving_getSysDict_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getSysDict_result__isset {
  _Serving_getSysDict_result__isset() : success(false) {}
  bool success :1;
} _Serving_getSysDict_result__isset;

class Serving_getSysDict_result {
 public:

  Serving_getSysDict_result(const Serving_getSysDict_result&);
  Serving_getSysDict_result& operator=(const Serving_getSysDict_result&);
  Serving_getSysDict_result() {
  }

  virtual ~Serving_getSysDict_result() throw();
  Data success;

  _Serving_getSysDict_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_getSysDict_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_getSysDict_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getSysDict_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getSysDict_presult__isset {
  _Serving_getSysDict_presult__isset() : success(false) {}
  bool success :1;
} _Serving_getSysDict_presult__isset;

class Serving_getSysDict_presult {
 public:


  virtual ~Serving_getSysDict_presult() throw();
  Data* success;

  _Serving_getSysDict_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_refSysDict_args__isset {
  _Serving_refSysDict_args__isset() : request(false) {}
  bool request :1;
} _Serving_refSysDict_args__isset;

class Serving_refSysDict_args {
 public:

  Serving_refSysDict_args(const Serving_refSysDict_args&);
  Serving_refSysDict_args& operator=(const Serving_refSysDict_args&);
  Serving_refSysDict_args() {
  }

  virtual ~Serving_refSysDict_args() throw();
  Data request;

  _Serving_refSysDict_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_refSysDict_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_refSysDict_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_refSysDict_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_refSysDict_pargs {
 public:


  virtual ~Serving_refSysDict_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_refSysDict_result__isset {
  _Serving_refSysDict_result__isset() : success(false) {}
  bool success :1;
} _Serving_refSysDict_result__isset;

class Serving_refSysDict_result {
 public:

  Serving_refSysDict_result(const Serving_refSysDict_result&);
  Serving_refSysDict_result& operator=(const Serving_refSysDict_result&);
  Serving_refSysDict_result() {
  }

  virtual ~Serving_refSysDict_result() throw();
  Data success;

  _Serving_refSysDict_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_refSysDict_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_refSysDict_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_refSysDict_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_refSysDict_presult__isset {
  _Serving_refSysDict_presult__isset() : success(false) {}
  bool success :1;
} _Serving_refSysDict_presult__isset;

class Serving_refSysDict_presult {
 public:


  virtual ~Serving_refSysDict_presult() throw();
  Data* success;

  _Serving_refSysDict_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_unrefSysDict_args__isset {
  _Serving_unrefSysDict_args__isset() : request(false) {}
  bool request :1;
} _Serving_unrefSysDict_args__isset;

class Serving_unrefSysDict_args {
 public:

  Serving_unrefSysDict_args(const Serving_unrefSysDict_args&);
  Serving_unrefSysDict_args& operator=(const Serving_unrefSysDict_args&);
  Serving_unrefSysDict_args() {
  }

  virtual ~Serving_unrefSysDict_args() throw();
  Data request;

  _Serving_unrefSysDict_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_unrefSysDict_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_unrefSysDict_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_unrefSysDict_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_unrefSysDict_pargs {
 public:


  virtual ~Serving_unrefSysDict_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_unrefSysDict_result__isset {
  _Serving_unrefSysDict_result__isset() : success(false) {}
  bool success :1;
} _Serving_unrefSysDict_result__isset;

class Serving_unrefSysDict_result {
 public:

  Serving_unrefSysDict_result(const Serving_unrefSysDict_result&);
  Serving_unrefSysDict_result& operator=(const Serving_unrefSysDict_result&);
  Serving_unrefSysDict_result() {
  }

  virtual ~Serving_unrefSysDict_result() throw();
  Data success;

  _Serving_unrefSysDict_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_unrefSysDict_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_unrefSysDict_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_unrefSysDict_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_unrefSysDict_presult__isset {
  _Serving_unrefSysDict_presult__isset() : success(false) {}
  bool success :1;
} _Serving_unrefSysDict_presult__isset;

class Serving_unrefSysDict_presult {
 public:


  virtual ~Serving_unrefSysDict_presult() throw();
  Data* success;

  _Serving_unrefSysDict_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_myDicts_args__isset {
  _Serving_myDicts_args__isset() : request(false) {}
  bool request :1;
} _Serving_myDicts_args__isset;

class Serving_myDicts_args {
 public:

  Serving_myDicts_args(const Serving_myDicts_args&);
  Serving_myDicts_args& operator=(const Serving_myDicts_args&);
  Serving_myDicts_args() {
  }

  virtual ~Serving_myDicts_args() throw();
  Data request;

  _Serving_myDicts_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_myDicts_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_myDicts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_myDicts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_myDicts_pargs {
 public:


  virtual ~Serving_myDicts_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_myDicts_result__isset {
  _Serving_myDicts_result__isset() : success(false) {}
  bool success :1;
} _Serving_myDicts_result__isset;

class Serving_myDicts_result {
 public:

  Serving_myDicts_result(const Serving_myDicts_result&);
  Serving_myDicts_result& operator=(const Serving_myDicts_result&);
  Serving_myDicts_result() {
  }

  virtual ~Serving_myDicts_result() throw();
  Data success;

  _Serving_myDicts_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_myDicts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_myDicts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_myDicts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_myDicts_presult__isset {
  _Serving_myDicts_presult__isset() : success(false) {}
  bool success :1;
} _Serving_myDicts_presult__isset;

class Serving_myDicts_presult {
 public:


  virtual ~Serving_myDicts_presult() throw();
  Data* success;

  _Serving_myDicts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_mySysdicts_args__isset {
  _Serving_mySysdicts_args__isset() : request(false) {}
  bool request :1;
} _Serving_mySysdicts_args__isset;

class Serving_mySysdicts_args {
 public:

  Serving_mySysdicts_args(const Serving_mySysdicts_args&);
  Serving_mySysdicts_args& operator=(const Serving_mySysdicts_args&);
  Serving_mySysdicts_args() {
  }

  virtual ~Serving_mySysdicts_args() throw();
  Data request;

  _Serving_mySysdicts_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_mySysdicts_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_mySysdicts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_mySysdicts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_mySysdicts_pargs {
 public:


  virtual ~Serving_mySysdicts_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_mySysdicts_result__isset {
  _Serving_mySysdicts_result__isset() : success(false) {}
  bool success :1;
} _Serving_mySysdicts_result__isset;

class Serving_mySysdicts_result {
 public:

  Serving_mySysdicts_result(const Serving_mySysdicts_result&);
  Serving_mySysdicts_result& operator=(const Serving_mySysdicts_result&);
  Serving_mySysdicts_result() {
  }

  virtual ~Serving_mySysdicts_result() throw();
  Data success;

  _Serving_mySysdicts_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_mySysdicts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_mySysdicts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_mySysdicts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_mySysdicts_presult__isset {
  _Serving_mySysdicts_presult__isset() : success(false) {}
  bool success :1;
} _Serving_mySysdicts_presult__isset;

class Serving_mySysdicts_presult {
 public:


  virtual ~Serving_mySysdicts_presult() throw();
  Data* success;

  _Serving_mySysdicts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_putDictWord_args__isset {
  _Serving_putDictWord_args__isset() : request(false) {}
  bool request :1;
} _Serving_putDictWord_args__isset;

class Serving_putDictWord_args {
 public:

  Serving_putDictWord_args(const Serving_putDictWord_args&);
  Serving_putDictWord_args& operator=(const Serving_putDictWord_args&);
  Serving_putDictWord_args() {
  }

  virtual ~Serving_putDictWord_args() throw();
  Data request;

  _Serving_putDictWord_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_putDictWord_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_putDictWord_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_putDictWord_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_putDictWord_pargs {
 public:


  virtual ~Serving_putDictWord_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_putDictWord_result__isset {
  _Serving_putDictWord_result__isset() : success(false) {}
  bool success :1;
} _Serving_putDictWord_result__isset;

class Serving_putDictWord_result {
 public:

  Serving_putDictWord_result(const Serving_putDictWord_result&);
  Serving_putDictWord_result& operator=(const Serving_putDictWord_result&);
  Serving_putDictWord_result() {
  }

  virtual ~Serving_putDictWord_result() throw();
  Data success;

  _Serving_putDictWord_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_putDictWord_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_putDictWord_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_putDictWord_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_putDictWord_presult__isset {
  _Serving_putDictWord_presult__isset() : success(false) {}
  bool success :1;
} _Serving_putDictWord_presult__isset;

class Serving_putDictWord_presult {
 public:


  virtual ~Serving_putDictWord_presult() throw();
  Data* success;

  _Serving_putDictWord_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_getDictWords_args__isset {
  _Serving_getDictWords_args__isset() : request(false) {}
  bool request :1;
} _Serving_getDictWords_args__isset;

class Serving_getDictWords_args {
 public:

  Serving_getDictWords_args(const Serving_getDictWords_args&);
  Serving_getDictWords_args& operator=(const Serving_getDictWords_args&);
  Serving_getDictWords_args() {
  }

  virtual ~Serving_getDictWords_args() throw();
  Data request;

  _Serving_getDictWords_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_getDictWords_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_getDictWords_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getDictWords_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_getDictWords_pargs {
 public:


  virtual ~Serving_getDictWords_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getDictWords_result__isset {
  _Serving_getDictWords_result__isset() : success(false) {}
  bool success :1;
} _Serving_getDictWords_result__isset;

class Serving_getDictWords_result {
 public:

  Serving_getDictWords_result(const Serving_getDictWords_result&);
  Serving_getDictWords_result& operator=(const Serving_getDictWords_result&);
  Serving_getDictWords_result() {
  }

  virtual ~Serving_getDictWords_result() throw();
  Data success;

  _Serving_getDictWords_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_getDictWords_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_getDictWords_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getDictWords_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getDictWords_presult__isset {
  _Serving_getDictWords_presult__isset() : success(false) {}
  bool success :1;
} _Serving_getDictWords_presult__isset;

class Serving_getDictWords_presult {
 public:


  virtual ~Serving_getDictWords_presult() throw();
  Data* success;

  _Serving_getDictWords_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_delDictWord_args__isset {
  _Serving_delDictWord_args__isset() : request(false) {}
  bool request :1;
} _Serving_delDictWord_args__isset;

class Serving_delDictWord_args {
 public:

  Serving_delDictWord_args(const Serving_delDictWord_args&);
  Serving_delDictWord_args& operator=(const Serving_delDictWord_args&);
  Serving_delDictWord_args() {
  }

  virtual ~Serving_delDictWord_args() throw();
  Data request;

  _Serving_delDictWord_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_delDictWord_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_delDictWord_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_delDictWord_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_delDictWord_pargs {
 public:


  virtual ~Serving_delDictWord_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_delDictWord_result__isset {
  _Serving_delDictWord_result__isset() : success(false) {}
  bool success :1;
} _Serving_delDictWord_result__isset;

class Serving_delDictWord_result {
 public:

  Serving_delDictWord_result(const Serving_delDictWord_result&);
  Serving_delDictWord_result& operator=(const Serving_delDictWord_result&);
  Serving_delDictWord_result() {
  }

  virtual ~Serving_delDictWord_result() throw();
  Data success;

  _Serving_delDictWord_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_delDictWord_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_delDictWord_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_delDictWord_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_delDictWord_presult__isset {
  _Serving_delDictWord_presult__isset() : success(false) {}
  bool success :1;
} _Serving_delDictWord_presult__isset;

class Serving_delDictWord_presult {
 public:


  virtual ~Serving_delDictWord_presult() throw();
  Data* success;

  _Serving_delDictWord_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_hasDictWord_args__isset {
  _Serving_hasDictWord_args__isset() : request(false) {}
  bool request :1;
} _Serving_hasDictWord_args__isset;

class Serving_hasDictWord_args {
 public:

  Serving_hasDictWord_args(const Serving_hasDictWord_args&);
  Serving_hasDictWord_args& operator=(const Serving_hasDictWord_args&);
  Serving_hasDictWord_args() {
  }

  virtual ~Serving_hasDictWord_args() throw();
  Data request;

  _Serving_hasDictWord_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_hasDictWord_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_hasDictWord_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_hasDictWord_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_hasDictWord_pargs {
 public:


  virtual ~Serving_hasDictWord_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_hasDictWord_result__isset {
  _Serving_hasDictWord_result__isset() : success(false) {}
  bool success :1;
} _Serving_hasDictWord_result__isset;

class Serving_hasDictWord_result {
 public:

  Serving_hasDictWord_result(const Serving_hasDictWord_result&);
  Serving_hasDictWord_result& operator=(const Serving_hasDictWord_result&);
  Serving_hasDictWord_result() {
  }

  virtual ~Serving_hasDictWord_result() throw();
  Data success;

  _Serving_hasDictWord_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_hasDictWord_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_hasDictWord_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_hasDictWord_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_hasDictWord_presult__isset {
  _Serving_hasDictWord_presult__isset() : success(false) {}
  bool success :1;
} _Serving_hasDictWord_presult__isset;

class Serving_hasDictWord_presult {
 public:


  virtual ~Serving_hasDictWord_presult() throw();
  Data* success;

  _Serving_hasDictWord_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_postIntent_args__isset {
  _Serving_postIntent_args__isset() : request(false) {}
  bool request :1;
} _Serving_postIntent_args__isset;

class Serving_postIntent_args {
 public:

  Serving_postIntent_args(const Serving_postIntent_args&);
  Serving_postIntent_args& operator=(const Serving_postIntent_args&);
  Serving_postIntent_args() {
  }

  virtual ~Serving_postIntent_args() throw();
  Data request;

  _Serving_postIntent_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_postIntent_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_postIntent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_postIntent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_postIntent_pargs {
 public:


  virtual ~Serving_postIntent_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_postIntent_result__isset {
  _Serving_postIntent_result__isset() : success(false) {}
  bool success :1;
} _Serving_postIntent_result__isset;

class Serving_postIntent_result {
 public:

  Serving_postIntent_result(const Serving_postIntent_result&);
  Serving_postIntent_result& operator=(const Serving_postIntent_result&);
  Serving_postIntent_result() {
  }

  virtual ~Serving_postIntent_result() throw();
  Data success;

  _Serving_postIntent_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_postIntent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_postIntent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_postIntent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_postIntent_presult__isset {
  _Serving_postIntent_presult__isset() : success(false) {}
  bool success :1;
} _Serving_postIntent_presult__isset;

class Serving_postIntent_presult {
 public:


  virtual ~Serving_postIntent_presult() throw();
  Data* success;

  _Serving_postIntent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_putIntent_args__isset {
  _Serving_putIntent_args__isset() : request(false) {}
  bool request :1;
} _Serving_putIntent_args__isset;

class Serving_putIntent_args {
 public:

  Serving_putIntent_args(const Serving_putIntent_args&);
  Serving_putIntent_args& operator=(const Serving_putIntent_args&);
  Serving_putIntent_args() {
  }

  virtual ~Serving_putIntent_args() throw();
  Data request;

  _Serving_putIntent_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_putIntent_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_putIntent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_putIntent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_putIntent_pargs {
 public:


  virtual ~Serving_putIntent_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_putIntent_result__isset {
  _Serving_putIntent_result__isset() : success(false) {}
  bool success :1;
} _Serving_putIntent_result__isset;

class Serving_putIntent_result {
 public:

  Serving_putIntent_result(const Serving_putIntent_result&);
  Serving_putIntent_result& operator=(const Serving_putIntent_result&);
  Serving_putIntent_result() {
  }

  virtual ~Serving_putIntent_result() throw();
  Data success;

  _Serving_putIntent_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_putIntent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_putIntent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_putIntent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_putIntent_presult__isset {
  _Serving_putIntent_presult__isset() : success(false) {}
  bool success :1;
} _Serving_putIntent_presult__isset;

class Serving_putIntent_presult {
 public:


  virtual ~Serving_putIntent_presult() throw();
  Data* success;

  _Serving_putIntent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_getIntents_args__isset {
  _Serving_getIntents_args__isset() : request(false) {}
  bool request :1;
} _Serving_getIntents_args__isset;

class Serving_getIntents_args {
 public:

  Serving_getIntents_args(const Serving_getIntents_args&);
  Serving_getIntents_args& operator=(const Serving_getIntents_args&);
  Serving_getIntents_args() {
  }

  virtual ~Serving_getIntents_args() throw();
  Data request;

  _Serving_getIntents_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_getIntents_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_getIntents_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getIntents_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_getIntents_pargs {
 public:


  virtual ~Serving_getIntents_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getIntents_result__isset {
  _Serving_getIntents_result__isset() : success(false) {}
  bool success :1;
} _Serving_getIntents_result__isset;

class Serving_getIntents_result {
 public:

  Serving_getIntents_result(const Serving_getIntents_result&);
  Serving_getIntents_result& operator=(const Serving_getIntents_result&);
  Serving_getIntents_result() {
  }

  virtual ~Serving_getIntents_result() throw();
  Data success;

  _Serving_getIntents_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_getIntents_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_getIntents_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getIntents_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getIntents_presult__isset {
  _Serving_getIntents_presult__isset() : success(false) {}
  bool success :1;
} _Serving_getIntents_presult__isset;

class Serving_getIntents_presult {
 public:


  virtual ~Serving_getIntents_presult() throw();
  Data* success;

  _Serving_getIntents_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_getIntent_args__isset {
  _Serving_getIntent_args__isset() : request(false) {}
  bool request :1;
} _Serving_getIntent_args__isset;

class Serving_getIntent_args {
 public:

  Serving_getIntent_args(const Serving_getIntent_args&);
  Serving_getIntent_args& operator=(const Serving_getIntent_args&);
  Serving_getIntent_args() {
  }

  virtual ~Serving_getIntent_args() throw();
  Data request;

  _Serving_getIntent_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_getIntent_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_getIntent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getIntent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_getIntent_pargs {
 public:


  virtual ~Serving_getIntent_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getIntent_result__isset {
  _Serving_getIntent_result__isset() : success(false) {}
  bool success :1;
} _Serving_getIntent_result__isset;

class Serving_getIntent_result {
 public:

  Serving_getIntent_result(const Serving_getIntent_result&);
  Serving_getIntent_result& operator=(const Serving_getIntent_result&);
  Serving_getIntent_result() {
  }

  virtual ~Serving_getIntent_result() throw();
  Data success;

  _Serving_getIntent_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_getIntent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_getIntent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getIntent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getIntent_presult__isset {
  _Serving_getIntent_presult__isset() : success(false) {}
  bool success :1;
} _Serving_getIntent_presult__isset;

class Serving_getIntent_presult {
 public:


  virtual ~Serving_getIntent_presult() throw();
  Data* success;

  _Serving_getIntent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_delIntent_args__isset {
  _Serving_delIntent_args__isset() : request(false) {}
  bool request :1;
} _Serving_delIntent_args__isset;

class Serving_delIntent_args {
 public:

  Serving_delIntent_args(const Serving_delIntent_args&);
  Serving_delIntent_args& operator=(const Serving_delIntent_args&);
  Serving_delIntent_args() {
  }

  virtual ~Serving_delIntent_args() throw();
  Data request;

  _Serving_delIntent_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_delIntent_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_delIntent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_delIntent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_delIntent_pargs {
 public:


  virtual ~Serving_delIntent_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_delIntent_result__isset {
  _Serving_delIntent_result__isset() : success(false) {}
  bool success :1;
} _Serving_delIntent_result__isset;

class Serving_delIntent_result {
 public:

  Serving_delIntent_result(const Serving_delIntent_result&);
  Serving_delIntent_result& operator=(const Serving_delIntent_result&);
  Serving_delIntent_result() {
  }

  virtual ~Serving_delIntent_result() throw();
  Data success;

  _Serving_delIntent_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_delIntent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_delIntent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_delIntent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_delIntent_presult__isset {
  _Serving_delIntent_presult__isset() : success(false) {}
  bool success :1;
} _Serving_delIntent_presult__isset;

class Serving_delIntent_presult {
 public:


  virtual ~Serving_delIntent_presult() throw();
  Data* success;

  _Serving_delIntent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_postUtter_args__isset {
  _Serving_postUtter_args__isset() : request(false) {}
  bool request :1;
} _Serving_postUtter_args__isset;

class Serving_postUtter_args {
 public:

  Serving_postUtter_args(const Serving_postUtter_args&);
  Serving_postUtter_args& operator=(const Serving_postUtter_args&);
  Serving_postUtter_args() {
  }

  virtual ~Serving_postUtter_args() throw();
  Data request;

  _Serving_postUtter_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_postUtter_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_postUtter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_postUtter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_postUtter_pargs {
 public:


  virtual ~Serving_postUtter_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_postUtter_result__isset {
  _Serving_postUtter_result__isset() : success(false) {}
  bool success :1;
} _Serving_postUtter_result__isset;

class Serving_postUtter_result {
 public:

  Serving_postUtter_result(const Serving_postUtter_result&);
  Serving_postUtter_result& operator=(const Serving_postUtter_result&);
  Serving_postUtter_result() {
  }

  virtual ~Serving_postUtter_result() throw();
  Data success;

  _Serving_postUtter_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_postUtter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_postUtter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_postUtter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_postUtter_presult__isset {
  _Serving_postUtter_presult__isset() : success(false) {}
  bool success :1;
} _Serving_postUtter_presult__isset;

class Serving_postUtter_presult {
 public:


  virtual ~Serving_postUtter_presult() throw();
  Data* success;

  _Serving_postUtter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_putUtter_args__isset {
  _Serving_putUtter_args__isset() : request(false) {}
  bool request :1;
} _Serving_putUtter_args__isset;

class Serving_putUtter_args {
 public:

  Serving_putUtter_args(const Serving_putUtter_args&);
  Serving_putUtter_args& operator=(const Serving_putUtter_args&);
  Serving_putUtter_args() {
  }

  virtual ~Serving_putUtter_args() throw();
  Data request;

  _Serving_putUtter_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_putUtter_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_putUtter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_putUtter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_putUtter_pargs {
 public:


  virtual ~Serving_putUtter_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_putUtter_result__isset {
  _Serving_putUtter_result__isset() : success(false) {}
  bool success :1;
} _Serving_putUtter_result__isset;

class Serving_putUtter_result {
 public:

  Serving_putUtter_result(const Serving_putUtter_result&);
  Serving_putUtter_result& operator=(const Serving_putUtter_result&);
  Serving_putUtter_result() {
  }

  virtual ~Serving_putUtter_result() throw();
  Data success;

  _Serving_putUtter_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_putUtter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_putUtter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_putUtter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_putUtter_presult__isset {
  _Serving_putUtter_presult__isset() : success(false) {}
  bool success :1;
} _Serving_putUtter_presult__isset;

class Serving_putUtter_presult {
 public:


  virtual ~Serving_putUtter_presult() throw();
  Data* success;

  _Serving_putUtter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_getUtters_args__isset {
  _Serving_getUtters_args__isset() : request(false) {}
  bool request :1;
} _Serving_getUtters_args__isset;

class Serving_getUtters_args {
 public:

  Serving_getUtters_args(const Serving_getUtters_args&);
  Serving_getUtters_args& operator=(const Serving_getUtters_args&);
  Serving_getUtters_args() {
  }

  virtual ~Serving_getUtters_args() throw();
  Data request;

  _Serving_getUtters_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_getUtters_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_getUtters_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getUtters_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_getUtters_pargs {
 public:


  virtual ~Serving_getUtters_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getUtters_result__isset {
  _Serving_getUtters_result__isset() : success(false) {}
  bool success :1;
} _Serving_getUtters_result__isset;

class Serving_getUtters_result {
 public:

  Serving_getUtters_result(const Serving_getUtters_result&);
  Serving_getUtters_result& operator=(const Serving_getUtters_result&);
  Serving_getUtters_result() {
  }

  virtual ~Serving_getUtters_result() throw();
  Data success;

  _Serving_getUtters_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_getUtters_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_getUtters_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getUtters_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getUtters_presult__isset {
  _Serving_getUtters_presult__isset() : success(false) {}
  bool success :1;
} _Serving_getUtters_presult__isset;

class Serving_getUtters_presult {
 public:


  virtual ~Serving_getUtters_presult() throw();
  Data* success;

  _Serving_getUtters_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_getUtter_args__isset {
  _Serving_getUtter_args__isset() : request(false) {}
  bool request :1;
} _Serving_getUtter_args__isset;

class Serving_getUtter_args {
 public:

  Serving_getUtter_args(const Serving_getUtter_args&);
  Serving_getUtter_args& operator=(const Serving_getUtter_args&);
  Serving_getUtter_args() {
  }

  virtual ~Serving_getUtter_args() throw();
  Data request;

  _Serving_getUtter_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_getUtter_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_getUtter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getUtter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_getUtter_pargs {
 public:


  virtual ~Serving_getUtter_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getUtter_result__isset {
  _Serving_getUtter_result__isset() : success(false) {}
  bool success :1;
} _Serving_getUtter_result__isset;

class Serving_getUtter_result {
 public:

  Serving_getUtter_result(const Serving_getUtter_result&);
  Serving_getUtter_result& operator=(const Serving_getUtter_result&);
  Serving_getUtter_result() {
  }

  virtual ~Serving_getUtter_result() throw();
  Data success;

  _Serving_getUtter_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_getUtter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_getUtter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getUtter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getUtter_presult__isset {
  _Serving_getUtter_presult__isset() : success(false) {}
  bool success :1;
} _Serving_getUtter_presult__isset;

class Serving_getUtter_presult {
 public:


  virtual ~Serving_getUtter_presult() throw();
  Data* success;

  _Serving_getUtter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_delUtter_args__isset {
  _Serving_delUtter_args__isset() : request(false) {}
  bool request :1;
} _Serving_delUtter_args__isset;

class Serving_delUtter_args {
 public:

  Serving_delUtter_args(const Serving_delUtter_args&);
  Serving_delUtter_args& operator=(const Serving_delUtter_args&);
  Serving_delUtter_args() {
  }

  virtual ~Serving_delUtter_args() throw();
  Data request;

  _Serving_delUtter_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_delUtter_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_delUtter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_delUtter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_delUtter_pargs {
 public:


  virtual ~Serving_delUtter_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_delUtter_result__isset {
  _Serving_delUtter_result__isset() : success(false) {}
  bool success :1;
} _Serving_delUtter_result__isset;

class Serving_delUtter_result {
 public:

  Serving_delUtter_result(const Serving_delUtter_result&);
  Serving_delUtter_result& operator=(const Serving_delUtter_result&);
  Serving_delUtter_result() {
  }

  virtual ~Serving_delUtter_result() throw();
  Data success;

  _Serving_delUtter_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_delUtter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_delUtter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_delUtter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_delUtter_presult__isset {
  _Serving_delUtter_presult__isset() : success(false) {}
  bool success :1;
} _Serving_delUtter_presult__isset;

class Serving_delUtter_presult {
 public:


  virtual ~Serving_delUtter_presult() throw();
  Data* success;

  _Serving_delUtter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_postSlot_args__isset {
  _Serving_postSlot_args__isset() : request(false) {}
  bool request :1;
} _Serving_postSlot_args__isset;

class Serving_postSlot_args {
 public:

  Serving_postSlot_args(const Serving_postSlot_args&);
  Serving_postSlot_args& operator=(const Serving_postSlot_args&);
  Serving_postSlot_args() {
  }

  virtual ~Serving_postSlot_args() throw();
  Data request;

  _Serving_postSlot_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_postSlot_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_postSlot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_postSlot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_postSlot_pargs {
 public:


  virtual ~Serving_postSlot_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_postSlot_result__isset {
  _Serving_postSlot_result__isset() : success(false) {}
  bool success :1;
} _Serving_postSlot_result__isset;

class Serving_postSlot_result {
 public:

  Serving_postSlot_result(const Serving_postSlot_result&);
  Serving_postSlot_result& operator=(const Serving_postSlot_result&);
  Serving_postSlot_result() {
  }

  virtual ~Serving_postSlot_result() throw();
  Data success;

  _Serving_postSlot_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_postSlot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_postSlot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_postSlot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_postSlot_presult__isset {
  _Serving_postSlot_presult__isset() : success(false) {}
  bool success :1;
} _Serving_postSlot_presult__isset;

class Serving_postSlot_presult {
 public:


  virtual ~Serving_postSlot_presult() throw();
  Data* success;

  _Serving_postSlot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_putSlot_args__isset {
  _Serving_putSlot_args__isset() : request(false) {}
  bool request :1;
} _Serving_putSlot_args__isset;

class Serving_putSlot_args {
 public:

  Serving_putSlot_args(const Serving_putSlot_args&);
  Serving_putSlot_args& operator=(const Serving_putSlot_args&);
  Serving_putSlot_args() {
  }

  virtual ~Serving_putSlot_args() throw();
  Data request;

  _Serving_putSlot_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_putSlot_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_putSlot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_putSlot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_putSlot_pargs {
 public:


  virtual ~Serving_putSlot_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_putSlot_result__isset {
  _Serving_putSlot_result__isset() : success(false) {}
  bool success :1;
} _Serving_putSlot_result__isset;

class Serving_putSlot_result {
 public:

  Serving_putSlot_result(const Serving_putSlot_result&);
  Serving_putSlot_result& operator=(const Serving_putSlot_result&);
  Serving_putSlot_result() {
  }

  virtual ~Serving_putSlot_result() throw();
  Data success;

  _Serving_putSlot_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_putSlot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_putSlot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_putSlot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_putSlot_presult__isset {
  _Serving_putSlot_presult__isset() : success(false) {}
  bool success :1;
} _Serving_putSlot_presult__isset;

class Serving_putSlot_presult {
 public:


  virtual ~Serving_putSlot_presult() throw();
  Data* success;

  _Serving_putSlot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_getSlots_args__isset {
  _Serving_getSlots_args__isset() : request(false) {}
  bool request :1;
} _Serving_getSlots_args__isset;

class Serving_getSlots_args {
 public:

  Serving_getSlots_args(const Serving_getSlots_args&);
  Serving_getSlots_args& operator=(const Serving_getSlots_args&);
  Serving_getSlots_args() {
  }

  virtual ~Serving_getSlots_args() throw();
  Data request;

  _Serving_getSlots_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_getSlots_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_getSlots_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getSlots_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_getSlots_pargs {
 public:


  virtual ~Serving_getSlots_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getSlots_result__isset {
  _Serving_getSlots_result__isset() : success(false) {}
  bool success :1;
} _Serving_getSlots_result__isset;

class Serving_getSlots_result {
 public:

  Serving_getSlots_result(const Serving_getSlots_result&);
  Serving_getSlots_result& operator=(const Serving_getSlots_result&);
  Serving_getSlots_result() {
  }

  virtual ~Serving_getSlots_result() throw();
  Data success;

  _Serving_getSlots_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_getSlots_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_getSlots_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getSlots_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getSlots_presult__isset {
  _Serving_getSlots_presult__isset() : success(false) {}
  bool success :1;
} _Serving_getSlots_presult__isset;

class Serving_getSlots_presult {
 public:


  virtual ~Serving_getSlots_presult() throw();
  Data* success;

  _Serving_getSlots_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_getSlot_args__isset {
  _Serving_getSlot_args__isset() : request(false) {}
  bool request :1;
} _Serving_getSlot_args__isset;

class Serving_getSlot_args {
 public:

  Serving_getSlot_args(const Serving_getSlot_args&);
  Serving_getSlot_args& operator=(const Serving_getSlot_args&);
  Serving_getSlot_args() {
  }

  virtual ~Serving_getSlot_args() throw();
  Data request;

  _Serving_getSlot_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_getSlot_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_getSlot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getSlot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_getSlot_pargs {
 public:


  virtual ~Serving_getSlot_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getSlot_result__isset {
  _Serving_getSlot_result__isset() : success(false) {}
  bool success :1;
} _Serving_getSlot_result__isset;

class Serving_getSlot_result {
 public:

  Serving_getSlot_result(const Serving_getSlot_result&);
  Serving_getSlot_result& operator=(const Serving_getSlot_result&);
  Serving_getSlot_result() {
  }

  virtual ~Serving_getSlot_result() throw();
  Data success;

  _Serving_getSlot_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_getSlot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_getSlot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getSlot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getSlot_presult__isset {
  _Serving_getSlot_presult__isset() : success(false) {}
  bool success :1;
} _Serving_getSlot_presult__isset;

class Serving_getSlot_presult {
 public:


  virtual ~Serving_getSlot_presult() throw();
  Data* success;

  _Serving_getSlot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_delSlot_args__isset {
  _Serving_delSlot_args__isset() : request(false) {}
  bool request :1;
} _Serving_delSlot_args__isset;

class Serving_delSlot_args {
 public:

  Serving_delSlot_args(const Serving_delSlot_args&);
  Serving_delSlot_args& operator=(const Serving_delSlot_args&);
  Serving_delSlot_args() {
  }

  virtual ~Serving_delSlot_args() throw();
  Data request;

  _Serving_delSlot_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_delSlot_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_delSlot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_delSlot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_delSlot_pargs {
 public:


  virtual ~Serving_delSlot_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_delSlot_result__isset {
  _Serving_delSlot_result__isset() : success(false) {}
  bool success :1;
} _Serving_delSlot_result__isset;

class Serving_delSlot_result {
 public:

  Serving_delSlot_result(const Serving_delSlot_result&);
  Serving_delSlot_result& operator=(const Serving_delSlot_result&);
  Serving_delSlot_result() {
  }

  virtual ~Serving_delSlot_result() throw();
  Data success;

  _Serving_delSlot_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_delSlot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_delSlot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_delSlot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_delSlot_presult__isset {
  _Serving_delSlot_presult__isset() : success(false) {}
  bool success :1;
} _Serving_delSlot_presult__isset;

class Serving_delSlot_presult {
 public:


  virtual ~Serving_delSlot_presult() throw();
  Data* success;

  _Serving_delSlot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_train_args__isset {
  _Serving_train_args__isset() : request(false) {}
  bool request :1;
} _Serving_train_args__isset;

class Serving_train_args {
 public:

  Serving_train_args(const Serving_train_args&);
  Serving_train_args& operator=(const Serving_train_args&);
  Serving_train_args() {
  }

  virtual ~Serving_train_args() throw();
  Data request;

  _Serving_train_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_train_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_train_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_train_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_train_pargs {
 public:


  virtual ~Serving_train_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_train_result__isset {
  _Serving_train_result__isset() : success(false) {}
  bool success :1;
} _Serving_train_result__isset;

class Serving_train_result {
 public:

  Serving_train_result(const Serving_train_result&);
  Serving_train_result& operator=(const Serving_train_result&);
  Serving_train_result() {
  }

  virtual ~Serving_train_result() throw();
  Data success;

  _Serving_train_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_train_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_train_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_train_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_train_presult__isset {
  _Serving_train_presult__isset() : success(false) {}
  bool success :1;
} _Serving_train_presult__isset;

class Serving_train_presult {
 public:


  virtual ~Serving_train_presult() throw();
  Data* success;

  _Serving_train_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_status_args__isset {
  _Serving_status_args__isset() : request(false) {}
  bool request :1;
} _Serving_status_args__isset;

class Serving_status_args {
 public:

  Serving_status_args(const Serving_status_args&);
  Serving_status_args& operator=(const Serving_status_args&);
  Serving_status_args() {
  }

  virtual ~Serving_status_args() throw();
  Data request;

  _Serving_status_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_status_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_status_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_status_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_status_pargs {
 public:


  virtual ~Serving_status_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_status_result__isset {
  _Serving_status_result__isset() : success(false) {}
  bool success :1;
} _Serving_status_result__isset;

class Serving_status_result {
 public:

  Serving_status_result(const Serving_status_result&);
  Serving_status_result& operator=(const Serving_status_result&);
  Serving_status_result() {
  }

  virtual ~Serving_status_result() throw();
  Data success;

  _Serving_status_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_status_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_status_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_status_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_status_presult__isset {
  _Serving_status_presult__isset() : success(false) {}
  bool success :1;
} _Serving_status_presult__isset;

class Serving_status_presult {
 public:


  virtual ~Serving_status_presult() throw();
  Data* success;

  _Serving_status_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_devver_args__isset {
  _Serving_devver_args__isset() : request(false) {}
  bool request :1;
} _Serving_devver_args__isset;

class Serving_devver_args {
 public:

  Serving_devver_args(const Serving_devver_args&);
  Serving_devver_args& operator=(const Serving_devver_args&);
  Serving_devver_args() {
  }

  virtual ~Serving_devver_args() throw();
  Data request;

  _Serving_devver_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_devver_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_devver_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_devver_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_devver_pargs {
 public:


  virtual ~Serving_devver_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_devver_result__isset {
  _Serving_devver_result__isset() : success(false) {}
  bool success :1;
} _Serving_devver_result__isset;

class Serving_devver_result {
 public:

  Serving_devver_result(const Serving_devver_result&);
  Serving_devver_result& operator=(const Serving_devver_result&);
  Serving_devver_result() {
  }

  virtual ~Serving_devver_result() throw();
  Data success;

  _Serving_devver_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_devver_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_devver_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_devver_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_devver_presult__isset {
  _Serving_devver_presult__isset() : success(false) {}
  bool success :1;
} _Serving_devver_presult__isset;

class Serving_devver_presult {
 public:


  virtual ~Serving_devver_presult() throw();
  Data* success;

  _Serving_devver_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_prover_args__isset {
  _Serving_prover_args__isset() : request(false) {}
  bool request :1;
} _Serving_prover_args__isset;

class Serving_prover_args {
 public:

  Serving_prover_args(const Serving_prover_args&);
  Serving_prover_args& operator=(const Serving_prover_args&);
  Serving_prover_args() {
  }

  virtual ~Serving_prover_args() throw();
  Data request;

  _Serving_prover_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_prover_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_prover_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_prover_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_prover_pargs {
 public:


  virtual ~Serving_prover_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_prover_result__isset {
  _Serving_prover_result__isset() : success(false) {}
  bool success :1;
} _Serving_prover_result__isset;

class Serving_prover_result {
 public:

  Serving_prover_result(const Serving_prover_result&);
  Serving_prover_result& operator=(const Serving_prover_result&);
  Serving_prover_result() {
  }

  virtual ~Serving_prover_result() throw();
  Data success;

  _Serving_prover_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_prover_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_prover_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_prover_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_prover_presult__isset {
  _Serving_prover_presult__isset() : success(false) {}
  bool success :1;
} _Serving_prover_presult__isset;

class Serving_prover_presult {
 public:


  virtual ~Serving_prover_presult() throw();
  Data* success;

  _Serving_prover_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_version_args__isset {
  _Serving_version_args__isset() : request(false) {}
  bool request :1;
} _Serving_version_args__isset;

class Serving_version_args {
 public:

  Serving_version_args(const Serving_version_args&);
  Serving_version_args& operator=(const Serving_version_args&);
  Serving_version_args() {
  }

  virtual ~Serving_version_args() throw();
  Data request;

  _Serving_version_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_version_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_version_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_version_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_version_pargs {
 public:


  virtual ~Serving_version_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_version_result__isset {
  _Serving_version_result__isset() : success(false) {}
  bool success :1;
} _Serving_version_result__isset;

class Serving_version_result {
 public:

  Serving_version_result(const Serving_version_result&);
  Serving_version_result& operator=(const Serving_version_result&);
  Serving_version_result() {
  }

  virtual ~Serving_version_result() throw();
  Data success;

  _Serving_version_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_version_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_version_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_version_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_version_presult__isset {
  _Serving_version_presult__isset() : success(false) {}
  bool success :1;
} _Serving_version_presult__isset;

class Serving_version_presult {
 public:


  virtual ~Serving_version_presult() throw();
  Data* success;

  _Serving_version_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_chat_args__isset {
  _Serving_chat_args__isset() : request(false) {}
  bool request :1;
} _Serving_chat_args__isset;

class Serving_chat_args {
 public:

  Serving_chat_args(const Serving_chat_args&);
  Serving_chat_args& operator=(const Serving_chat_args&);
  Serving_chat_args() {
  }

  virtual ~Serving_chat_args() throw();
  Data request;

  _Serving_chat_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_chat_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_chat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_chat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_chat_pargs {
 public:


  virtual ~Serving_chat_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_chat_result__isset {
  _Serving_chat_result__isset() : success(false) {}
  bool success :1;
} _Serving_chat_result__isset;

class Serving_chat_result {
 public:

  Serving_chat_result(const Serving_chat_result&);
  Serving_chat_result& operator=(const Serving_chat_result&);
  Serving_chat_result() {
  }

  virtual ~Serving_chat_result() throw();
  Data success;

  _Serving_chat_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_chat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_chat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_chat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_chat_presult__isset {
  _Serving_chat_presult__isset() : success(false) {}
  bool success :1;
} _Serving_chat_presult__isset;

class Serving_chat_presult {
 public:


  virtual ~Serving_chat_presult() throw();
  Data* success;

  _Serving_chat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_online_args__isset {
  _Serving_online_args__isset() : request(false) {}
  bool request :1;
} _Serving_online_args__isset;

class Serving_online_args {
 public:

  Serving_online_args(const Serving_online_args&);
  Serving_online_args& operator=(const Serving_online_args&);
  Serving_online_args() {
  }

  virtual ~Serving_online_args() throw();
  Data request;

  _Serving_online_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_online_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_online_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_online_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_online_pargs {
 public:


  virtual ~Serving_online_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_online_result__isset {
  _Serving_online_result__isset() : success(false) {}
  bool success :1;
} _Serving_online_result__isset;

class Serving_online_result {
 public:

  Serving_online_result(const Serving_online_result&);
  Serving_online_result& operator=(const Serving_online_result&);
  Serving_online_result() {
  }

  virtual ~Serving_online_result() throw();
  Data success;

  _Serving_online_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_online_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_online_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_online_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_online_presult__isset {
  _Serving_online_presult__isset() : success(false) {}
  bool success :1;
} _Serving_online_presult__isset;

class Serving_online_presult {
 public:


  virtual ~Serving_online_presult() throw();
  Data* success;

  _Serving_online_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_offline_args__isset {
  _Serving_offline_args__isset() : request(false) {}
  bool request :1;
} _Serving_offline_args__isset;

class Serving_offline_args {
 public:

  Serving_offline_args(const Serving_offline_args&);
  Serving_offline_args& operator=(const Serving_offline_args&);
  Serving_offline_args() {
  }

  virtual ~Serving_offline_args() throw();
  Data request;

  _Serving_offline_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_offline_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_offline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_offline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_offline_pargs {
 public:


  virtual ~Serving_offline_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_offline_result__isset {
  _Serving_offline_result__isset() : success(false) {}
  bool success :1;
} _Serving_offline_result__isset;

class Serving_offline_result {
 public:

  Serving_offline_result(const Serving_offline_result&);
  Serving_offline_result& operator=(const Serving_offline_result&);
  Serving_offline_result() {
  }

  virtual ~Serving_offline_result() throw();
  Data success;

  _Serving_offline_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_offline_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_offline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_offline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_offline_presult__isset {
  _Serving_offline_presult__isset() : success(false) {}
  bool success :1;
} _Serving_offline_presult__isset;

class Serving_offline_presult {
 public:


  virtual ~Serving_offline_presult() throw();
  Data* success;

  _Serving_offline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_putSession_args__isset {
  _Serving_putSession_args__isset() : request(false) {}
  bool request :1;
} _Serving_putSession_args__isset;

class Serving_putSession_args {
 public:

  Serving_putSession_args(const Serving_putSession_args&);
  Serving_putSession_args& operator=(const Serving_putSession_args&);
  Serving_putSession_args() {
  }

  virtual ~Serving_putSession_args() throw();
  Data request;

  _Serving_putSession_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_putSession_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_putSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_putSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_putSession_pargs {
 public:


  virtual ~Serving_putSession_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_putSession_result__isset {
  _Serving_putSession_result__isset() : success(false) {}
  bool success :1;
} _Serving_putSession_result__isset;

class Serving_putSession_result {
 public:

  Serving_putSession_result(const Serving_putSession_result&);
  Serving_putSession_result& operator=(const Serving_putSession_result&);
  Serving_putSession_result() {
  }

  virtual ~Serving_putSession_result() throw();
  Data success;

  _Serving_putSession_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_putSession_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_putSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_putSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_putSession_presult__isset {
  _Serving_putSession_presult__isset() : success(false) {}
  bool success :1;
} _Serving_putSession_presult__isset;

class Serving_putSession_presult {
 public:


  virtual ~Serving_putSession_presult() throw();
  Data* success;

  _Serving_putSession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serving_getSession_args__isset {
  _Serving_getSession_args__isset() : request(false) {}
  bool request :1;
} _Serving_getSession_args__isset;

class Serving_getSession_args {
 public:

  Serving_getSession_args(const Serving_getSession_args&);
  Serving_getSession_args& operator=(const Serving_getSession_args&);
  Serving_getSession_args() {
  }

  virtual ~Serving_getSession_args() throw();
  Data request;

  _Serving_getSession_args__isset __isset;

  void __set_request(const Data& val);

  bool operator == (const Serving_getSession_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Serving_getSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serving_getSession_pargs {
 public:


  virtual ~Serving_getSession_pargs() throw();
  const Data* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getSession_result__isset {
  _Serving_getSession_result__isset() : success(false) {}
  bool success :1;
} _Serving_getSession_result__isset;

class Serving_getSession_result {
 public:

  Serving_getSession_result(const Serving_getSession_result&);
  Serving_getSession_result& operator=(const Serving_getSession_result&);
  Serving_getSession_result() {
  }

  virtual ~Serving_getSession_result() throw();
  Data success;

  _Serving_getSession_result__isset __isset;

  void __set_success(const Data& val);

  bool operator == (const Serving_getSession_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serving_getSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serving_getSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serving_getSession_presult__isset {
  _Serving_getSession_presult__isset() : success(false) {}
  bool success :1;
} _Serving_getSession_presult__isset;

class Serving_getSession_presult {
 public:


  virtual ~Serving_getSession_presult() throw();
  Data* success;

  _Serving_getSession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ServingClient : virtual public ServingIf {
 public:
  ServingClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ServingClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void postCustomDict(Data& _return, const Data& request);
  void send_postCustomDict(const Data& request);
  void recv_postCustomDict(Data& _return);
  void putCustomDict(Data& _return, const Data& request);
  void send_putCustomDict(const Data& request);
  void recv_putCustomDict(Data& _return);
  void getCustomDicts(Data& _return, const Data& request);
  void send_getCustomDicts(const Data& request);
  void recv_getCustomDicts(Data& _return);
  void getCustomDict(Data& _return, const Data& request);
  void send_getCustomDict(const Data& request);
  void recv_getCustomDict(Data& _return);
  void delCustomDict(Data& _return, const Data& request);
  void send_delCustomDict(const Data& request);
  void recv_delCustomDict(Data& _return);
  void postSysDict(Data& _return, const Data& request);
  void send_postSysDict(const Data& request);
  void recv_postSysDict(Data& _return);
  void putSysDict(Data& _return, const Data& request);
  void send_putSysDict(const Data& request);
  void recv_putSysDict(Data& _return);
  void getSysDicts(Data& _return, const Data& request);
  void send_getSysDicts(const Data& request);
  void recv_getSysDicts(Data& _return);
  void getSysDict(Data& _return, const Data& request);
  void send_getSysDict(const Data& request);
  void recv_getSysDict(Data& _return);
  void refSysDict(Data& _return, const Data& request);
  void send_refSysDict(const Data& request);
  void recv_refSysDict(Data& _return);
  void unrefSysDict(Data& _return, const Data& request);
  void send_unrefSysDict(const Data& request);
  void recv_unrefSysDict(Data& _return);
  void myDicts(Data& _return, const Data& request);
  void send_myDicts(const Data& request);
  void recv_myDicts(Data& _return);
  void mySysdicts(Data& _return, const Data& request);
  void send_mySysdicts(const Data& request);
  void recv_mySysdicts(Data& _return);
  void putDictWord(Data& _return, const Data& request);
  void send_putDictWord(const Data& request);
  void recv_putDictWord(Data& _return);
  void getDictWords(Data& _return, const Data& request);
  void send_getDictWords(const Data& request);
  void recv_getDictWords(Data& _return);
  void delDictWord(Data& _return, const Data& request);
  void send_delDictWord(const Data& request);
  void recv_delDictWord(Data& _return);
  void hasDictWord(Data& _return, const Data& request);
  void send_hasDictWord(const Data& request);
  void recv_hasDictWord(Data& _return);
  void postIntent(Data& _return, const Data& request);
  void send_postIntent(const Data& request);
  void recv_postIntent(Data& _return);
  void putIntent(Data& _return, const Data& request);
  void send_putIntent(const Data& request);
  void recv_putIntent(Data& _return);
  void getIntents(Data& _return, const Data& request);
  void send_getIntents(const Data& request);
  void recv_getIntents(Data& _return);
  void getIntent(Data& _return, const Data& request);
  void send_getIntent(const Data& request);
  void recv_getIntent(Data& _return);
  void delIntent(Data& _return, const Data& request);
  void send_delIntent(const Data& request);
  void recv_delIntent(Data& _return);
  void postUtter(Data& _return, const Data& request);
  void send_postUtter(const Data& request);
  void recv_postUtter(Data& _return);
  void putUtter(Data& _return, const Data& request);
  void send_putUtter(const Data& request);
  void recv_putUtter(Data& _return);
  void getUtters(Data& _return, const Data& request);
  void send_getUtters(const Data& request);
  void recv_getUtters(Data& _return);
  void getUtter(Data& _return, const Data& request);
  void send_getUtter(const Data& request);
  void recv_getUtter(Data& _return);
  void delUtter(Data& _return, const Data& request);
  void send_delUtter(const Data& request);
  void recv_delUtter(Data& _return);
  void postSlot(Data& _return, const Data& request);
  void send_postSlot(const Data& request);
  void recv_postSlot(Data& _return);
  void putSlot(Data& _return, const Data& request);
  void send_putSlot(const Data& request);
  void recv_putSlot(Data& _return);
  void getSlots(Data& _return, const Data& request);
  void send_getSlots(const Data& request);
  void recv_getSlots(Data& _return);
  void getSlot(Data& _return, const Data& request);
  void send_getSlot(const Data& request);
  void recv_getSlot(Data& _return);
  void delSlot(Data& _return, const Data& request);
  void send_delSlot(const Data& request);
  void recv_delSlot(Data& _return);
  void train(Data& _return, const Data& request);
  void send_train(const Data& request);
  void recv_train(Data& _return);
  void status(Data& _return, const Data& request);
  void send_status(const Data& request);
  void recv_status(Data& _return);
  void devver(Data& _return, const Data& request);
  void send_devver(const Data& request);
  void recv_devver(Data& _return);
  void prover(Data& _return, const Data& request);
  void send_prover(const Data& request);
  void recv_prover(Data& _return);
  void version(Data& _return, const Data& request);
  void send_version(const Data& request);
  void recv_version(Data& _return);
  void chat(Data& _return, const Data& request);
  void send_chat(const Data& request);
  void recv_chat(Data& _return);
  void online(Data& _return, const Data& request);
  void send_online(const Data& request);
  void recv_online(Data& _return);
  void offline(Data& _return, const Data& request);
  void send_offline(const Data& request);
  void recv_offline(Data& _return);
  void putSession(Data& _return, const Data& request);
  void send_putSession(const Data& request);
  void recv_putSession(Data& _return);
  void getSession(Data& _return, const Data& request);
  void send_getSession(const Data& request);
  void recv_getSession(Data& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ServingProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<ServingIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ServingProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_postCustomDict(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_putCustomDict(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCustomDicts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCustomDict(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delCustomDict(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postSysDict(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_putSysDict(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSysDicts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSysDict(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_refSysDict(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unrefSysDict(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_myDicts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mySysdicts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_putDictWord(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDictWords(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delDictWord(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_hasDictWord(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postIntent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_putIntent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getIntents(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getIntent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delIntent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postUtter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_putUtter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUtters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUtter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delUtter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postSlot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_putSlot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSlots(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSlot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delSlot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_train(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_status(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_devver(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_prover(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_version(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_chat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_online(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_offline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_putSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ServingProcessor(::apache::thrift::stdcxx::shared_ptr<ServingIf> iface) :
    iface_(iface) {
    processMap_["postCustomDict"] = &ServingProcessor::process_postCustomDict;
    processMap_["putCustomDict"] = &ServingProcessor::process_putCustomDict;
    processMap_["getCustomDicts"] = &ServingProcessor::process_getCustomDicts;
    processMap_["getCustomDict"] = &ServingProcessor::process_getCustomDict;
    processMap_["delCustomDict"] = &ServingProcessor::process_delCustomDict;
    processMap_["postSysDict"] = &ServingProcessor::process_postSysDict;
    processMap_["putSysDict"] = &ServingProcessor::process_putSysDict;
    processMap_["getSysDicts"] = &ServingProcessor::process_getSysDicts;
    processMap_["getSysDict"] = &ServingProcessor::process_getSysDict;
    processMap_["refSysDict"] = &ServingProcessor::process_refSysDict;
    processMap_["unrefSysDict"] = &ServingProcessor::process_unrefSysDict;
    processMap_["myDicts"] = &ServingProcessor::process_myDicts;
    processMap_["mySysdicts"] = &ServingProcessor::process_mySysdicts;
    processMap_["putDictWord"] = &ServingProcessor::process_putDictWord;
    processMap_["getDictWords"] = &ServingProcessor::process_getDictWords;
    processMap_["delDictWord"] = &ServingProcessor::process_delDictWord;
    processMap_["hasDictWord"] = &ServingProcessor::process_hasDictWord;
    processMap_["postIntent"] = &ServingProcessor::process_postIntent;
    processMap_["putIntent"] = &ServingProcessor::process_putIntent;
    processMap_["getIntents"] = &ServingProcessor::process_getIntents;
    processMap_["getIntent"] = &ServingProcessor::process_getIntent;
    processMap_["delIntent"] = &ServingProcessor::process_delIntent;
    processMap_["postUtter"] = &ServingProcessor::process_postUtter;
    processMap_["putUtter"] = &ServingProcessor::process_putUtter;
    processMap_["getUtters"] = &ServingProcessor::process_getUtters;
    processMap_["getUtter"] = &ServingProcessor::process_getUtter;
    processMap_["delUtter"] = &ServingProcessor::process_delUtter;
    processMap_["postSlot"] = &ServingProcessor::process_postSlot;
    processMap_["putSlot"] = &ServingProcessor::process_putSlot;
    processMap_["getSlots"] = &ServingProcessor::process_getSlots;
    processMap_["getSlot"] = &ServingProcessor::process_getSlot;
    processMap_["delSlot"] = &ServingProcessor::process_delSlot;
    processMap_["train"] = &ServingProcessor::process_train;
    processMap_["status"] = &ServingProcessor::process_status;
    processMap_["devver"] = &ServingProcessor::process_devver;
    processMap_["prover"] = &ServingProcessor::process_prover;
    processMap_["version"] = &ServingProcessor::process_version;
    processMap_["chat"] = &ServingProcessor::process_chat;
    processMap_["online"] = &ServingProcessor::process_online;
    processMap_["offline"] = &ServingProcessor::process_offline;
    processMap_["putSession"] = &ServingProcessor::process_putSession;
    processMap_["getSession"] = &ServingProcessor::process_getSession;
  }

  virtual ~ServingProcessor() {}
};

class ServingProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ServingProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< ServingIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< ServingIfFactory > handlerFactory_;
};

class ServingMultiface : virtual public ServingIf {
 public:
  ServingMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<ServingIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ServingMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<ServingIf> > ifaces_;
  ServingMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<ServingIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void postCustomDict(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postCustomDict(_return, request);
    }
    ifaces_[i]->postCustomDict(_return, request);
    return;
  }

  void putCustomDict(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->putCustomDict(_return, request);
    }
    ifaces_[i]->putCustomDict(_return, request);
    return;
  }

  void getCustomDicts(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCustomDicts(_return, request);
    }
    ifaces_[i]->getCustomDicts(_return, request);
    return;
  }

  void getCustomDict(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCustomDict(_return, request);
    }
    ifaces_[i]->getCustomDict(_return, request);
    return;
  }

  void delCustomDict(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delCustomDict(_return, request);
    }
    ifaces_[i]->delCustomDict(_return, request);
    return;
  }

  void postSysDict(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postSysDict(_return, request);
    }
    ifaces_[i]->postSysDict(_return, request);
    return;
  }

  void putSysDict(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->putSysDict(_return, request);
    }
    ifaces_[i]->putSysDict(_return, request);
    return;
  }

  void getSysDicts(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSysDicts(_return, request);
    }
    ifaces_[i]->getSysDicts(_return, request);
    return;
  }

  void getSysDict(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSysDict(_return, request);
    }
    ifaces_[i]->getSysDict(_return, request);
    return;
  }

  void refSysDict(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->refSysDict(_return, request);
    }
    ifaces_[i]->refSysDict(_return, request);
    return;
  }

  void unrefSysDict(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unrefSysDict(_return, request);
    }
    ifaces_[i]->unrefSysDict(_return, request);
    return;
  }

  void myDicts(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->myDicts(_return, request);
    }
    ifaces_[i]->myDicts(_return, request);
    return;
  }

  void mySysdicts(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mySysdicts(_return, request);
    }
    ifaces_[i]->mySysdicts(_return, request);
    return;
  }

  void putDictWord(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->putDictWord(_return, request);
    }
    ifaces_[i]->putDictWord(_return, request);
    return;
  }

  void getDictWords(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDictWords(_return, request);
    }
    ifaces_[i]->getDictWords(_return, request);
    return;
  }

  void delDictWord(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delDictWord(_return, request);
    }
    ifaces_[i]->delDictWord(_return, request);
    return;
  }

  void hasDictWord(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->hasDictWord(_return, request);
    }
    ifaces_[i]->hasDictWord(_return, request);
    return;
  }

  void postIntent(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postIntent(_return, request);
    }
    ifaces_[i]->postIntent(_return, request);
    return;
  }

  void putIntent(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->putIntent(_return, request);
    }
    ifaces_[i]->putIntent(_return, request);
    return;
  }

  void getIntents(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getIntents(_return, request);
    }
    ifaces_[i]->getIntents(_return, request);
    return;
  }

  void getIntent(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getIntent(_return, request);
    }
    ifaces_[i]->getIntent(_return, request);
    return;
  }

  void delIntent(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delIntent(_return, request);
    }
    ifaces_[i]->delIntent(_return, request);
    return;
  }

  void postUtter(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postUtter(_return, request);
    }
    ifaces_[i]->postUtter(_return, request);
    return;
  }

  void putUtter(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->putUtter(_return, request);
    }
    ifaces_[i]->putUtter(_return, request);
    return;
  }

  void getUtters(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUtters(_return, request);
    }
    ifaces_[i]->getUtters(_return, request);
    return;
  }

  void getUtter(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUtter(_return, request);
    }
    ifaces_[i]->getUtter(_return, request);
    return;
  }

  void delUtter(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delUtter(_return, request);
    }
    ifaces_[i]->delUtter(_return, request);
    return;
  }

  void postSlot(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postSlot(_return, request);
    }
    ifaces_[i]->postSlot(_return, request);
    return;
  }

  void putSlot(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->putSlot(_return, request);
    }
    ifaces_[i]->putSlot(_return, request);
    return;
  }

  void getSlots(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSlots(_return, request);
    }
    ifaces_[i]->getSlots(_return, request);
    return;
  }

  void getSlot(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSlot(_return, request);
    }
    ifaces_[i]->getSlot(_return, request);
    return;
  }

  void delSlot(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delSlot(_return, request);
    }
    ifaces_[i]->delSlot(_return, request);
    return;
  }

  void train(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->train(_return, request);
    }
    ifaces_[i]->train(_return, request);
    return;
  }

  void status(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->status(_return, request);
    }
    ifaces_[i]->status(_return, request);
    return;
  }

  void devver(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->devver(_return, request);
    }
    ifaces_[i]->devver(_return, request);
    return;
  }

  void prover(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->prover(_return, request);
    }
    ifaces_[i]->prover(_return, request);
    return;
  }

  void version(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->version(_return, request);
    }
    ifaces_[i]->version(_return, request);
    return;
  }

  void chat(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->chat(_return, request);
    }
    ifaces_[i]->chat(_return, request);
    return;
  }

  void online(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->online(_return, request);
    }
    ifaces_[i]->online(_return, request);
    return;
  }

  void offline(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->offline(_return, request);
    }
    ifaces_[i]->offline(_return, request);
    return;
  }

  void putSession(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->putSession(_return, request);
    }
    ifaces_[i]->putSession(_return, request);
    return;
  }

  void getSession(Data& _return, const Data& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSession(_return, request);
    }
    ifaces_[i]->getSession(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ServingConcurrentClient : virtual public ServingIf {
 public:
  ServingConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ServingConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void postCustomDict(Data& _return, const Data& request);
  int32_t send_postCustomDict(const Data& request);
  void recv_postCustomDict(Data& _return, const int32_t seqid);
  void putCustomDict(Data& _return, const Data& request);
  int32_t send_putCustomDict(const Data& request);
  void recv_putCustomDict(Data& _return, const int32_t seqid);
  void getCustomDicts(Data& _return, const Data& request);
  int32_t send_getCustomDicts(const Data& request);
  void recv_getCustomDicts(Data& _return, const int32_t seqid);
  void getCustomDict(Data& _return, const Data& request);
  int32_t send_getCustomDict(const Data& request);
  void recv_getCustomDict(Data& _return, const int32_t seqid);
  void delCustomDict(Data& _return, const Data& request);
  int32_t send_delCustomDict(const Data& request);
  void recv_delCustomDict(Data& _return, const int32_t seqid);
  void postSysDict(Data& _return, const Data& request);
  int32_t send_postSysDict(const Data& request);
  void recv_postSysDict(Data& _return, const int32_t seqid);
  void putSysDict(Data& _return, const Data& request);
  int32_t send_putSysDict(const Data& request);
  void recv_putSysDict(Data& _return, const int32_t seqid);
  void getSysDicts(Data& _return, const Data& request);
  int32_t send_getSysDicts(const Data& request);
  void recv_getSysDicts(Data& _return, const int32_t seqid);
  void getSysDict(Data& _return, const Data& request);
  int32_t send_getSysDict(const Data& request);
  void recv_getSysDict(Data& _return, const int32_t seqid);
  void refSysDict(Data& _return, const Data& request);
  int32_t send_refSysDict(const Data& request);
  void recv_refSysDict(Data& _return, const int32_t seqid);
  void unrefSysDict(Data& _return, const Data& request);
  int32_t send_unrefSysDict(const Data& request);
  void recv_unrefSysDict(Data& _return, const int32_t seqid);
  void myDicts(Data& _return, const Data& request);
  int32_t send_myDicts(const Data& request);
  void recv_myDicts(Data& _return, const int32_t seqid);
  void mySysdicts(Data& _return, const Data& request);
  int32_t send_mySysdicts(const Data& request);
  void recv_mySysdicts(Data& _return, const int32_t seqid);
  void putDictWord(Data& _return, const Data& request);
  int32_t send_putDictWord(const Data& request);
  void recv_putDictWord(Data& _return, const int32_t seqid);
  void getDictWords(Data& _return, const Data& request);
  int32_t send_getDictWords(const Data& request);
  void recv_getDictWords(Data& _return, const int32_t seqid);
  void delDictWord(Data& _return, const Data& request);
  int32_t send_delDictWord(const Data& request);
  void recv_delDictWord(Data& _return, const int32_t seqid);
  void hasDictWord(Data& _return, const Data& request);
  int32_t send_hasDictWord(const Data& request);
  void recv_hasDictWord(Data& _return, const int32_t seqid);
  void postIntent(Data& _return, const Data& request);
  int32_t send_postIntent(const Data& request);
  void recv_postIntent(Data& _return, const int32_t seqid);
  void putIntent(Data& _return, const Data& request);
  int32_t send_putIntent(const Data& request);
  void recv_putIntent(Data& _return, const int32_t seqid);
  void getIntents(Data& _return, const Data& request);
  int32_t send_getIntents(const Data& request);
  void recv_getIntents(Data& _return, const int32_t seqid);
  void getIntent(Data& _return, const Data& request);
  int32_t send_getIntent(const Data& request);
  void recv_getIntent(Data& _return, const int32_t seqid);
  void delIntent(Data& _return, const Data& request);
  int32_t send_delIntent(const Data& request);
  void recv_delIntent(Data& _return, const int32_t seqid);
  void postUtter(Data& _return, const Data& request);
  int32_t send_postUtter(const Data& request);
  void recv_postUtter(Data& _return, const int32_t seqid);
  void putUtter(Data& _return, const Data& request);
  int32_t send_putUtter(const Data& request);
  void recv_putUtter(Data& _return, const int32_t seqid);
  void getUtters(Data& _return, const Data& request);
  int32_t send_getUtters(const Data& request);
  void recv_getUtters(Data& _return, const int32_t seqid);
  void getUtter(Data& _return, const Data& request);
  int32_t send_getUtter(const Data& request);
  void recv_getUtter(Data& _return, const int32_t seqid);
  void delUtter(Data& _return, const Data& request);
  int32_t send_delUtter(const Data& request);
  void recv_delUtter(Data& _return, const int32_t seqid);
  void postSlot(Data& _return, const Data& request);
  int32_t send_postSlot(const Data& request);
  void recv_postSlot(Data& _return, const int32_t seqid);
  void putSlot(Data& _return, const Data& request);
  int32_t send_putSlot(const Data& request);
  void recv_putSlot(Data& _return, const int32_t seqid);
  void getSlots(Data& _return, const Data& request);
  int32_t send_getSlots(const Data& request);
  void recv_getSlots(Data& _return, const int32_t seqid);
  void getSlot(Data& _return, const Data& request);
  int32_t send_getSlot(const Data& request);
  void recv_getSlot(Data& _return, const int32_t seqid);
  void delSlot(Data& _return, const Data& request);
  int32_t send_delSlot(const Data& request);
  void recv_delSlot(Data& _return, const int32_t seqid);
  void train(Data& _return, const Data& request);
  int32_t send_train(const Data& request);
  void recv_train(Data& _return, const int32_t seqid);
  void status(Data& _return, const Data& request);
  int32_t send_status(const Data& request);
  void recv_status(Data& _return, const int32_t seqid);
  void devver(Data& _return, const Data& request);
  int32_t send_devver(const Data& request);
  void recv_devver(Data& _return, const int32_t seqid);
  void prover(Data& _return, const Data& request);
  int32_t send_prover(const Data& request);
  void recv_prover(Data& _return, const int32_t seqid);
  void version(Data& _return, const Data& request);
  int32_t send_version(const Data& request);
  void recv_version(Data& _return, const int32_t seqid);
  void chat(Data& _return, const Data& request);
  int32_t send_chat(const Data& request);
  void recv_chat(Data& _return, const int32_t seqid);
  void online(Data& _return, const Data& request);
  int32_t send_online(const Data& request);
  void recv_online(Data& _return, const int32_t seqid);
  void offline(Data& _return, const Data& request);
  int32_t send_offline(const Data& request);
  void recv_offline(Data& _return, const int32_t seqid);
  void putSession(Data& _return, const Data& request);
  int32_t send_putSession(const Data& request);
  void recv_putSession(Data& _return, const int32_t seqid);
  void getSession(Data& _return, const Data& request);
  int32_t send_getSession(const Data& request);
  void recv_getSession(Data& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
