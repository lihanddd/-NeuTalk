/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef server_TYPES_H
#define server_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace chatopera { namespace bot { namespace clause {

typedef std::string Timestamp;

typedef class Dict CustomDict;

typedef class Dict SysDict;

class BotSysdict;

class ChatMessage;

class Entity;

class ChatSession;

class DictWord;

class Dict;

class Intent;

class IntentSlot;

class IntentUtter;

class ProdVersion;

class DevelopVersion;

class Data;

typedef struct _BotSysdict__isset {
  _BotSysdict__isset() : chatbotID(false), dict_id(false), id(false), createdate(false) {}
  bool chatbotID :1;
  bool dict_id :1;
  bool id :1;
  bool createdate :1;
} _BotSysdict__isset;

class BotSysdict : public virtual ::apache::thrift::TBase {
 public:

  BotSysdict(const BotSysdict&);
  BotSysdict& operator=(const BotSysdict&);
  BotSysdict() : chatbotID(), dict_id(), id(), createdate() {
  }

  virtual ~BotSysdict() throw();
  std::string chatbotID;
  std::string dict_id;
  std::string id;
  Timestamp createdate;

  _BotSysdict__isset __isset;

  void __set_chatbotID(const std::string& val);

  void __set_dict_id(const std::string& val);

  void __set_id(const std::string& val);

  void __set_createdate(const Timestamp& val);

  bool operator == (const BotSysdict & rhs) const
  {
    if (__isset.chatbotID != rhs.__isset.chatbotID)
      return false;
    else if (__isset.chatbotID && !(chatbotID == rhs.chatbotID))
      return false;
    if (__isset.dict_id != rhs.__isset.dict_id)
      return false;
    else if (__isset.dict_id && !(dict_id == rhs.dict_id))
      return false;
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.createdate != rhs.__isset.createdate)
      return false;
    else if (__isset.createdate && !(createdate == rhs.createdate))
      return false;
    return true;
  }
  bool operator != (const BotSysdict &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BotSysdict & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BotSysdict &a, BotSysdict &b);

std::ostream& operator<<(std::ostream& out, const BotSysdict& obj);

typedef struct _ChatMessage__isset {
  _ChatMessage__isset() : session_id(false), chatbotID(false), type(false), direction(false), branch(false), sender(false), receiver(false), createdate(false), id(false), textMessage(false), audioMessage(false), videoMessage(false), imageMessage(false), terms(false), tags(false), is_fallback(false), is_proactive(false) {}
  bool session_id :1;
  bool chatbotID :1;
  bool type :1;
  bool direction :1;
  bool branch :1;
  bool sender :1;
  bool receiver :1;
  bool createdate :1;
  bool id :1;
  bool textMessage :1;
  bool audioMessage :1;
  bool videoMessage :1;
  bool imageMessage :1;
  bool terms :1;
  bool tags :1;
  bool is_fallback :1;
  bool is_proactive :1;
} _ChatMessage__isset;

class ChatMessage : public virtual ::apache::thrift::TBase {
 public:

  ChatMessage(const ChatMessage&);
  ChatMessage& operator=(const ChatMessage&);
  ChatMessage() : session_id(), chatbotID(), type(), direction(0), branch(0), sender(), receiver(), createdate(), id(), textMessage(), audioMessage(), videoMessage(), imageMessage(), is_fallback(0), is_proactive(0) {
  }

  virtual ~ChatMessage() throw();
  std::string session_id;
  std::string chatbotID;
  std::string type;
  int32_t direction;
  int32_t branch;
  std::string sender;
  std::string receiver;
  Timestamp createdate;
  std::string id;
  std::string textMessage;
  std::string audioMessage;
  std::string videoMessage;
  std::string imageMessage;
  std::vector<std::string>  terms;
  std::vector<std::string>  tags;
  bool is_fallback;
  bool is_proactive;

  _ChatMessage__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_chatbotID(const std::string& val);

  void __set_type(const std::string& val);

  void __set_direction(const int32_t val);

  void __set_branch(const int32_t val);

  void __set_sender(const std::string& val);

  void __set_receiver(const std::string& val);

  void __set_createdate(const Timestamp& val);

  void __set_id(const std::string& val);

  void __set_textMessage(const std::string& val);

  void __set_audioMessage(const std::string& val);

  void __set_videoMessage(const std::string& val);

  void __set_imageMessage(const std::string& val);

  void __set_terms(const std::vector<std::string> & val);

  void __set_tags(const std::vector<std::string> & val);

  void __set_is_fallback(const bool val);

  void __set_is_proactive(const bool val);

  bool operator == (const ChatMessage & rhs) const
  {
    if (__isset.session_id != rhs.__isset.session_id)
      return false;
    else if (__isset.session_id && !(session_id == rhs.session_id))
      return false;
    if (__isset.chatbotID != rhs.__isset.chatbotID)
      return false;
    else if (__isset.chatbotID && !(chatbotID == rhs.chatbotID))
      return false;
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.direction != rhs.__isset.direction)
      return false;
    else if (__isset.direction && !(direction == rhs.direction))
      return false;
    if (__isset.branch != rhs.__isset.branch)
      return false;
    else if (__isset.branch && !(branch == rhs.branch))
      return false;
    if (__isset.sender != rhs.__isset.sender)
      return false;
    else if (__isset.sender && !(sender == rhs.sender))
      return false;
    if (__isset.receiver != rhs.__isset.receiver)
      return false;
    else if (__isset.receiver && !(receiver == rhs.receiver))
      return false;
    if (__isset.createdate != rhs.__isset.createdate)
      return false;
    else if (__isset.createdate && !(createdate == rhs.createdate))
      return false;
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.textMessage != rhs.__isset.textMessage)
      return false;
    else if (__isset.textMessage && !(textMessage == rhs.textMessage))
      return false;
    if (__isset.audioMessage != rhs.__isset.audioMessage)
      return false;
    else if (__isset.audioMessage && !(audioMessage == rhs.audioMessage))
      return false;
    if (__isset.videoMessage != rhs.__isset.videoMessage)
      return false;
    else if (__isset.videoMessage && !(videoMessage == rhs.videoMessage))
      return false;
    if (__isset.imageMessage != rhs.__isset.imageMessage)
      return false;
    else if (__isset.imageMessage && !(imageMessage == rhs.imageMessage))
      return false;
    if (__isset.terms != rhs.__isset.terms)
      return false;
    else if (__isset.terms && !(terms == rhs.terms))
      return false;
    if (__isset.tags != rhs.__isset.tags)
      return false;
    else if (__isset.tags && !(tags == rhs.tags))
      return false;
    if (__isset.is_fallback != rhs.__isset.is_fallback)
      return false;
    else if (__isset.is_fallback && !(is_fallback == rhs.is_fallback))
      return false;
    if (__isset.is_proactive != rhs.__isset.is_proactive)
      return false;
    else if (__isset.is_proactive && !(is_proactive == rhs.is_proactive))
      return false;
    return true;
  }
  bool operator != (const ChatMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChatMessage &a, ChatMessage &b);

std::ostream& operator<<(std::ostream& out, const ChatMessage& obj);

typedef struct _Entity__isset {
  _Entity__isset() : name(false), val(false), requires(false), dictname(false) {}
  bool name :1;
  bool val :1;
  bool requires :1;
  bool dictname :1;
} _Entity__isset;

class Entity : public virtual ::apache::thrift::TBase {
 public:

  Entity(const Entity&);
  Entity& operator=(const Entity&);
  Entity() : name(), val(), requires(0), dictname() {
  }

  virtual ~Entity() throw();
  std::string name;
  std::string val;
  bool requires;
  std::string dictname;

  _Entity__isset __isset;

  void __set_name(const std::string& val);

  void __set_val(const std::string& val);

  void __set_requires(const bool val);

  void __set_dictname(const std::string& val);

  bool operator == (const Entity & rhs) const
  {
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.val != rhs.__isset.val)
      return false;
    else if (__isset.val && !(val == rhs.val))
      return false;
    if (__isset.requires != rhs.__isset.requires)
      return false;
    else if (__isset.requires && !(requires == rhs.requires))
      return false;
    if (__isset.dictname != rhs.__isset.dictname)
      return false;
    else if (__isset.dictname && !(dictname == rhs.dictname))
      return false;
    return true;
  }
  bool operator != (const Entity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Entity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Entity &a, Entity &b);

std::ostream& operator<<(std::ostream& out, const Entity& obj);

typedef struct _ChatSession__isset {
  _ChatSession__isset() : intent_name(false), chatbotID(false), uid(false), channel(false), resolved(false), id(false), entities(false), branch(false), createdate(false), updatedate(false) {}
  bool intent_name :1;
  bool chatbotID :1;
  bool uid :1;
  bool channel :1;
  bool resolved :1;
  bool id :1;
  bool entities :1;
  bool branch :1;
  bool createdate :1;
  bool updatedate :1;
} _ChatSession__isset;

class ChatSession : public virtual ::apache::thrift::TBase {
 public:

  ChatSession(const ChatSession&);
  ChatSession& operator=(const ChatSession&);
  ChatSession() : intent_name(), chatbotID(), uid(), channel(), resolved(0), id(), branch(), createdate(), updatedate() {
  }

  virtual ~ChatSession() throw();
  std::string intent_name;
  std::string chatbotID;
  std::string uid;
  std::string channel;
  bool resolved;
  std::string id;
  std::vector<Entity>  entities;
  std::string branch;
  Timestamp createdate;
  Timestamp updatedate;

  _ChatSession__isset __isset;

  void __set_intent_name(const std::string& val);

  void __set_chatbotID(const std::string& val);

  void __set_uid(const std::string& val);

  void __set_channel(const std::string& val);

  void __set_resolved(const bool val);

  void __set_id(const std::string& val);

  void __set_entities(const std::vector<Entity> & val);

  void __set_branch(const std::string& val);

  void __set_createdate(const Timestamp& val);

  void __set_updatedate(const Timestamp& val);

  bool operator == (const ChatSession & rhs) const
  {
    if (__isset.intent_name != rhs.__isset.intent_name)
      return false;
    else if (__isset.intent_name && !(intent_name == rhs.intent_name))
      return false;
    if (__isset.chatbotID != rhs.__isset.chatbotID)
      return false;
    else if (__isset.chatbotID && !(chatbotID == rhs.chatbotID))
      return false;
    if (__isset.uid != rhs.__isset.uid)
      return false;
    else if (__isset.uid && !(uid == rhs.uid))
      return false;
    if (__isset.channel != rhs.__isset.channel)
      return false;
    else if (__isset.channel && !(channel == rhs.channel))
      return false;
    if (__isset.resolved != rhs.__isset.resolved)
      return false;
    else if (__isset.resolved && !(resolved == rhs.resolved))
      return false;
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.entities != rhs.__isset.entities)
      return false;
    else if (__isset.entities && !(entities == rhs.entities))
      return false;
    if (__isset.branch != rhs.__isset.branch)
      return false;
    else if (__isset.branch && !(branch == rhs.branch))
      return false;
    if (__isset.createdate != rhs.__isset.createdate)
      return false;
    else if (__isset.createdate && !(createdate == rhs.createdate))
      return false;
    if (__isset.updatedate != rhs.__isset.updatedate)
      return false;
    else if (__isset.updatedate && !(updatedate == rhs.updatedate))
      return false;
    return true;
  }
  bool operator != (const ChatSession &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatSession & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChatSession &a, ChatSession &b);

std::ostream& operator<<(std::ostream& out, const ChatSession& obj);

typedef struct _DictWord__isset {
  _DictWord__isset() : word(false), dict_id(false), synonyms(false), tag(false), lang(false), createdate(false), updatedate(false) {}
  bool word :1;
  bool dict_id :1;
  bool synonyms :1;
  bool tag :1;
  bool lang :1;
  bool createdate :1;
  bool updatedate :1;
} _DictWord__isset;

class DictWord : public virtual ::apache::thrift::TBase {
 public:

  DictWord(const DictWord&);
  DictWord& operator=(const DictWord&);
  DictWord() : word(), dict_id(), synonyms(), tag(), lang(), createdate(), updatedate() {
  }

  virtual ~DictWord() throw();
  std::string word;
  std::string dict_id;
  std::string synonyms;
  std::string tag;
  std::string lang;
  Timestamp createdate;
  Timestamp updatedate;

  _DictWord__isset __isset;

  void __set_word(const std::string& val);

  void __set_dict_id(const std::string& val);

  void __set_synonyms(const std::string& val);

  void __set_tag(const std::string& val);

  void __set_lang(const std::string& val);

  void __set_createdate(const Timestamp& val);

  void __set_updatedate(const Timestamp& val);

  bool operator == (const DictWord & rhs) const
  {
    if (__isset.word != rhs.__isset.word)
      return false;
    else if (__isset.word && !(word == rhs.word))
      return false;
    if (__isset.dict_id != rhs.__isset.dict_id)
      return false;
    else if (__isset.dict_id && !(dict_id == rhs.dict_id))
      return false;
    if (__isset.synonyms != rhs.__isset.synonyms)
      return false;
    else if (__isset.synonyms && !(synonyms == rhs.synonyms))
      return false;
    if (__isset.tag != rhs.__isset.tag)
      return false;
    else if (__isset.tag && !(tag == rhs.tag))
      return false;
    if (__isset.lang != rhs.__isset.lang)
      return false;
    else if (__isset.lang && !(lang == rhs.lang))
      return false;
    if (__isset.createdate != rhs.__isset.createdate)
      return false;
    else if (__isset.createdate && !(createdate == rhs.createdate))
      return false;
    if (__isset.updatedate != rhs.__isset.updatedate)
      return false;
    else if (__isset.updatedate && !(updatedate == rhs.updatedate))
      return false;
    return true;
  }
  bool operator != (const DictWord &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DictWord & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DictWord &a, DictWord &b);

std::ostream& operator<<(std::ostream& out, const DictWord& obj);

typedef struct _Dict__isset {
  _Dict__isset() : name(false), chatbotID(false), builtin(false), active(false), id(false), description(false), samples(false), createdate(false), updatedate(false), referred(false) {}
  bool name :1;
  bool chatbotID :1;
  bool builtin :1;
  bool active :1;
  bool id :1;
  bool description :1;
  bool samples :1;
  bool createdate :1;
  bool updatedate :1;
  bool referred :1;
} _Dict__isset;

class Dict : public virtual ::apache::thrift::TBase {
 public:

  Dict(const Dict&);
  Dict& operator=(const Dict&);
  Dict() : name(), chatbotID(), builtin(0), active(0), id(), description(), samples(), createdate(), updatedate(), referred(0) {
  }

  virtual ~Dict() throw();
  std::string name;
  std::string chatbotID;
  bool builtin;
  bool active;
  std::string id;
  std::string description;
  std::string samples;
  Timestamp createdate;
  Timestamp updatedate;
  bool referred;

  _Dict__isset __isset;

  void __set_name(const std::string& val);

  void __set_chatbotID(const std::string& val);

  void __set_builtin(const bool val);

  void __set_active(const bool val);

  void __set_id(const std::string& val);

  void __set_description(const std::string& val);

  void __set_samples(const std::string& val);

  void __set_createdate(const Timestamp& val);

  void __set_updatedate(const Timestamp& val);

  void __set_referred(const bool val);

  bool operator == (const Dict & rhs) const
  {
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.chatbotID != rhs.__isset.chatbotID)
      return false;
    else if (__isset.chatbotID && !(chatbotID == rhs.chatbotID))
      return false;
    if (__isset.builtin != rhs.__isset.builtin)
      return false;
    else if (__isset.builtin && !(builtin == rhs.builtin))
      return false;
    if (__isset.active != rhs.__isset.active)
      return false;
    else if (__isset.active && !(active == rhs.active))
      return false;
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.description != rhs.__isset.description)
      return false;
    else if (__isset.description && !(description == rhs.description))
      return false;
    if (__isset.samples != rhs.__isset.samples)
      return false;
    else if (__isset.samples && !(samples == rhs.samples))
      return false;
    if (__isset.createdate != rhs.__isset.createdate)
      return false;
    else if (__isset.createdate && !(createdate == rhs.createdate))
      return false;
    if (__isset.updatedate != rhs.__isset.updatedate)
      return false;
    else if (__isset.updatedate && !(updatedate == rhs.updatedate))
      return false;
    if (__isset.referred != rhs.__isset.referred)
      return false;
    else if (__isset.referred && !(referred == rhs.referred))
      return false;
    return true;
  }
  bool operator != (const Dict &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dict & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Dict &a, Dict &b);

std::ostream& operator<<(std::ostream& out, const Dict& obj);

typedef struct _Intent__isset {
  _Intent__isset() : chatbotID(false), name(false), id(false), description(false), createdate(false), updatedate(false) {}
  bool chatbotID :1;
  bool name :1;
  bool id :1;
  bool description :1;
  bool createdate :1;
  bool updatedate :1;
} _Intent__isset;

class Intent : public virtual ::apache::thrift::TBase {
 public:

  Intent(const Intent&);
  Intent& operator=(const Intent&);
  Intent() : chatbotID(), name(), id(), description(), createdate(), updatedate() {
  }

  virtual ~Intent() throw();
  std::string chatbotID;
  std::string name;
  std::string id;
  std::string description;
  Timestamp createdate;
  Timestamp updatedate;

  _Intent__isset __isset;

  void __set_chatbotID(const std::string& val);

  void __set_name(const std::string& val);

  void __set_id(const std::string& val);

  void __set_description(const std::string& val);

  void __set_createdate(const Timestamp& val);

  void __set_updatedate(const Timestamp& val);

  bool operator == (const Intent & rhs) const
  {
    if (__isset.chatbotID != rhs.__isset.chatbotID)
      return false;
    else if (__isset.chatbotID && !(chatbotID == rhs.chatbotID))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.description != rhs.__isset.description)
      return false;
    else if (__isset.description && !(description == rhs.description))
      return false;
    if (__isset.createdate != rhs.__isset.createdate)
      return false;
    else if (__isset.createdate && !(createdate == rhs.createdate))
      return false;
    if (__isset.updatedate != rhs.__isset.updatedate)
      return false;
    else if (__isset.updatedate && !(updatedate == rhs.updatedate))
      return false;
    return true;
  }
  bool operator != (const Intent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Intent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Intent &a, Intent &b);

std::ostream& operator<<(std::ostream& out, const Intent& obj);

typedef struct _IntentSlot__isset {
  _IntentSlot__isset() : intent_id(false), name(false), dict_id(false), requires(false), id(false), createdate(false), updatedate(false), question(false), dict(false) {}
  bool intent_id :1;
  bool name :1;
  bool dict_id :1;
  bool requires :1;
  bool id :1;
  bool createdate :1;
  bool updatedate :1;
  bool question :1;
  bool dict :1;
} _IntentSlot__isset;

class IntentSlot : public virtual ::apache::thrift::TBase {
 public:

  IntentSlot(const IntentSlot&);
  IntentSlot& operator=(const IntentSlot&);
  IntentSlot() : intent_id(), name(), dict_id(), requires(0), id(), createdate(), updatedate(), question() {
  }

  virtual ~IntentSlot() throw();
  std::string intent_id;
  std::string name;
  std::string dict_id;
  bool requires;
  std::string id;
  Timestamp createdate;
  Timestamp updatedate;
  std::string question;
  Dict dict;

  _IntentSlot__isset __isset;

  void __set_intent_id(const std::string& val);

  void __set_name(const std::string& val);

  void __set_dict_id(const std::string& val);

  void __set_requires(const bool val);

  void __set_id(const std::string& val);

  void __set_createdate(const Timestamp& val);

  void __set_updatedate(const Timestamp& val);

  void __set_question(const std::string& val);

  void __set_dict(const Dict& val);

  bool operator == (const IntentSlot & rhs) const
  {
    if (__isset.intent_id != rhs.__isset.intent_id)
      return false;
    else if (__isset.intent_id && !(intent_id == rhs.intent_id))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.dict_id != rhs.__isset.dict_id)
      return false;
    else if (__isset.dict_id && !(dict_id == rhs.dict_id))
      return false;
    if (__isset.requires != rhs.__isset.requires)
      return false;
    else if (__isset.requires && !(requires == rhs.requires))
      return false;
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.createdate != rhs.__isset.createdate)
      return false;
    else if (__isset.createdate && !(createdate == rhs.createdate))
      return false;
    if (__isset.updatedate != rhs.__isset.updatedate)
      return false;
    else if (__isset.updatedate && !(updatedate == rhs.updatedate))
      return false;
    if (__isset.question != rhs.__isset.question)
      return false;
    else if (__isset.question && !(question == rhs.question))
      return false;
    if (__isset.dict != rhs.__isset.dict)
      return false;
    else if (__isset.dict && !(dict == rhs.dict))
      return false;
    return true;
  }
  bool operator != (const IntentSlot &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IntentSlot & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(IntentSlot &a, IntentSlot &b);

std::ostream& operator<<(std::ostream& out, const IntentSlot& obj);

typedef struct _IntentUtter__isset {
  _IntentUtter__isset() : intent_id(false), utterance(false), id(false), createdate(false), updatedate(false) {}
  bool intent_id :1;
  bool utterance :1;
  bool id :1;
  bool createdate :1;
  bool updatedate :1;
} _IntentUtter__isset;

class IntentUtter : public virtual ::apache::thrift::TBase {
 public:

  IntentUtter(const IntentUtter&);
  IntentUtter& operator=(const IntentUtter&);
  IntentUtter() : intent_id(), utterance(), id(), createdate(), updatedate() {
  }

  virtual ~IntentUtter() throw();
  std::string intent_id;
  std::string utterance;
  std::string id;
  Timestamp createdate;
  Timestamp updatedate;

  _IntentUtter__isset __isset;

  void __set_intent_id(const std::string& val);

  void __set_utterance(const std::string& val);

  void __set_id(const std::string& val);

  void __set_createdate(const Timestamp& val);

  void __set_updatedate(const Timestamp& val);

  bool operator == (const IntentUtter & rhs) const
  {
    if (__isset.intent_id != rhs.__isset.intent_id)
      return false;
    else if (__isset.intent_id && !(intent_id == rhs.intent_id))
      return false;
    if (__isset.utterance != rhs.__isset.utterance)
      return false;
    else if (__isset.utterance && !(utterance == rhs.utterance))
      return false;
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.createdate != rhs.__isset.createdate)
      return false;
    else if (__isset.createdate && !(createdate == rhs.createdate))
      return false;
    if (__isset.updatedate != rhs.__isset.updatedate)
      return false;
    else if (__isset.updatedate && !(updatedate == rhs.updatedate))
      return false;
    return true;
  }
  bool operator != (const IntentUtter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IntentUtter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(IntentUtter &a, IntentUtter &b);

std::ostream& operator<<(std::ostream& out, const IntentUtter& obj);

typedef struct _ProdVersion__isset {
  _ProdVersion__isset() : chatbotID(false), version(false), active(false), latest(false), id(false), operated(false), notes(false), createdate(false) {}
  bool chatbotID :1;
  bool version :1;
  bool active :1;
  bool latest :1;
  bool id :1;
  bool operated :1;
  bool notes :1;
  bool createdate :1;
} _ProdVersion__isset;

class ProdVersion : public virtual ::apache::thrift::TBase {
 public:

  ProdVersion(const ProdVersion&);
  ProdVersion& operator=(const ProdVersion&);
  ProdVersion() : chatbotID(), version(), active(0), latest(0), id(), operated(), notes(), createdate() {
  }

  virtual ~ProdVersion() throw();
  std::string chatbotID;
  std::string version;
  bool active;
  bool latest;
  std::string id;
  std::string operated;
  std::string notes;
  Timestamp createdate;

  _ProdVersion__isset __isset;

  void __set_chatbotID(const std::string& val);

  void __set_version(const std::string& val);

  void __set_active(const bool val);

  void __set_latest(const bool val);

  void __set_id(const std::string& val);

  void __set_operated(const std::string& val);

  void __set_notes(const std::string& val);

  void __set_createdate(const Timestamp& val);

  bool operator == (const ProdVersion & rhs) const
  {
    if (__isset.chatbotID != rhs.__isset.chatbotID)
      return false;
    else if (__isset.chatbotID && !(chatbotID == rhs.chatbotID))
      return false;
    if (__isset.version != rhs.__isset.version)
      return false;
    else if (__isset.version && !(version == rhs.version))
      return false;
    if (__isset.active != rhs.__isset.active)
      return false;
    else if (__isset.active && !(active == rhs.active))
      return false;
    if (__isset.latest != rhs.__isset.latest)
      return false;
    else if (__isset.latest && !(latest == rhs.latest))
      return false;
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.operated != rhs.__isset.operated)
      return false;
    else if (__isset.operated && !(operated == rhs.operated))
      return false;
    if (__isset.notes != rhs.__isset.notes)
      return false;
    else if (__isset.notes && !(notes == rhs.notes))
      return false;
    if (__isset.createdate != rhs.__isset.createdate)
      return false;
    else if (__isset.createdate && !(createdate == rhs.createdate))
      return false;
    return true;
  }
  bool operator != (const ProdVersion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProdVersion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProdVersion &a, ProdVersion &b);

std::ostream& operator<<(std::ostream& out, const ProdVersion& obj);

typedef struct _DevelopVersion__isset {
  _DevelopVersion__isset() : chatbotID(false), version(false), published(false), id(false), createdate(false), operated(false) {}
  bool chatbotID :1;
  bool version :1;
  bool published :1;
  bool id :1;
  bool createdate :1;
  bool operated :1;
} _DevelopVersion__isset;

class DevelopVersion : public virtual ::apache::thrift::TBase {
 public:

  DevelopVersion(const DevelopVersion&);
  DevelopVersion& operator=(const DevelopVersion&);
  DevelopVersion() : chatbotID(), version(), published(0), id(), createdate(), operated() {
  }

  virtual ~DevelopVersion() throw();
  std::string chatbotID;
  std::string version;
  bool published;
  std::string id;
  Timestamp createdate;
  std::string operated;

  _DevelopVersion__isset __isset;

  void __set_chatbotID(const std::string& val);

  void __set_version(const std::string& val);

  void __set_published(const bool val);

  void __set_id(const std::string& val);

  void __set_createdate(const Timestamp& val);

  void __set_operated(const std::string& val);

  bool operator == (const DevelopVersion & rhs) const
  {
    if (__isset.chatbotID != rhs.__isset.chatbotID)
      return false;
    else if (__isset.chatbotID && !(chatbotID == rhs.chatbotID))
      return false;
    if (__isset.version != rhs.__isset.version)
      return false;
    else if (__isset.version && !(version == rhs.version))
      return false;
    if (__isset.published != rhs.__isset.published)
      return false;
    else if (__isset.published && !(published == rhs.published))
      return false;
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.createdate != rhs.__isset.createdate)
      return false;
    else if (__isset.createdate && !(createdate == rhs.createdate))
      return false;
    if (__isset.operated != rhs.__isset.operated)
      return false;
    else if (__isset.operated && !(operated == rhs.operated))
      return false;
    return true;
  }
  bool operator != (const DevelopVersion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DevelopVersion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DevelopVersion &a, DevelopVersion &b);

std::ostream& operator<<(std::ostream& out, const DevelopVersion& obj);

typedef struct _Data__isset {
  _Data__isset() : rc(false), error(false), msg(false), id(false), chatbotID(false), customdicts(false), sysdicts(false), botsysdicts(false), dictwords(false), customdict(false), sysdict(false), botsysdict(false), dictword(false), intents(false), slots(false), utters(false), intent(false), slot(false), utter(false), devvers(false), provers(false), devver(false), prover(false), sessions(false), messages(false), session(false), message(false), currpage(false), totalpage(false), totalrows(false), pagesize(false), page(false), query(false) {}
  bool rc :1;
  bool error :1;
  bool msg :1;
  bool id :1;
  bool chatbotID :1;
  bool customdicts :1;
  bool sysdicts :1;
  bool botsysdicts :1;
  bool dictwords :1;
  bool customdict :1;
  bool sysdict :1;
  bool botsysdict :1;
  bool dictword :1;
  bool intents :1;
  bool slots :1;
  bool utters :1;
  bool intent :1;
  bool slot :1;
  bool utter :1;
  bool devvers :1;
  bool provers :1;
  bool devver :1;
  bool prover :1;
  bool sessions :1;
  bool messages :1;
  bool session :1;
  bool message :1;
  bool currpage :1;
  bool totalpage :1;
  bool totalrows :1;
  bool pagesize :1;
  bool page :1;
  bool query :1;
} _Data__isset;

class Data : public virtual ::apache::thrift::TBase {
 public:

  Data(const Data&);
  Data& operator=(const Data&);
  Data() : rc(0), error(), msg(), id(), chatbotID(), currpage(0), totalpage(0), totalrows(0), pagesize(0), page(0), query() {
  }

  virtual ~Data() throw();
  int32_t rc;
  std::string error;
  std::string msg;
  std::string id;
  std::string chatbotID;
  std::vector<CustomDict>  customdicts;
  std::vector<SysDict>  sysdicts;
  std::vector<BotSysdict>  botsysdicts;
  std::vector<DictWord>  dictwords;
  CustomDict customdict;
  SysDict sysdict;
  BotSysdict botsysdict;
  DictWord dictword;
  std::vector<Intent>  intents;
  std::vector<IntentSlot>  slots;
  std::vector<IntentUtter>  utters;
  Intent intent;
  IntentSlot slot;
  IntentUtter utter;
  std::vector<DevelopVersion>  devvers;
  std::vector<ProdVersion>  provers;
  DevelopVersion devver;
  ProdVersion prover;
  std::vector<ChatSession>  sessions;
  std::vector<ChatMessage>  messages;
  ChatSession session;
  ChatMessage message;
  int32_t currpage;
  int32_t totalpage;
  int32_t totalrows;
  int32_t pagesize;
  int32_t page;
  std::string query;

  _Data__isset __isset;

  void __set_rc(const int32_t val);

  void __set_error(const std::string& val);

  void __set_msg(const std::string& val);

  void __set_id(const std::string& val);

  void __set_chatbotID(const std::string& val);

  void __set_customdicts(const std::vector<CustomDict> & val);

  void __set_sysdicts(const std::vector<SysDict> & val);

  void __set_botsysdicts(const std::vector<BotSysdict> & val);

  void __set_dictwords(const std::vector<DictWord> & val);

  void __set_customdict(const CustomDict& val);

  void __set_sysdict(const SysDict& val);

  void __set_botsysdict(const BotSysdict& val);

  void __set_dictword(const DictWord& val);

  void __set_intents(const std::vector<Intent> & val);

  void __set_slots(const std::vector<IntentSlot> & val);

  void __set_utters(const std::vector<IntentUtter> & val);

  void __set_intent(const Intent& val);

  void __set_slot(const IntentSlot& val);

  void __set_utter(const IntentUtter& val);

  void __set_devvers(const std::vector<DevelopVersion> & val);

  void __set_provers(const std::vector<ProdVersion> & val);

  void __set_devver(const DevelopVersion& val);

  void __set_prover(const ProdVersion& val);

  void __set_sessions(const std::vector<ChatSession> & val);

  void __set_messages(const std::vector<ChatMessage> & val);

  void __set_session(const ChatSession& val);

  void __set_message(const ChatMessage& val);

  void __set_currpage(const int32_t val);

  void __set_totalpage(const int32_t val);

  void __set_totalrows(const int32_t val);

  void __set_pagesize(const int32_t val);

  void __set_page(const int32_t val);

  void __set_query(const std::string& val);

  bool operator == (const Data & rhs) const
  {
    if (__isset.rc != rhs.__isset.rc)
      return false;
    else if (__isset.rc && !(rc == rhs.rc))
      return false;
    if (__isset.error != rhs.__isset.error)
      return false;
    else if (__isset.error && !(error == rhs.error))
      return false;
    if (__isset.msg != rhs.__isset.msg)
      return false;
    else if (__isset.msg && !(msg == rhs.msg))
      return false;
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.chatbotID != rhs.__isset.chatbotID)
      return false;
    else if (__isset.chatbotID && !(chatbotID == rhs.chatbotID))
      return false;
    if (__isset.customdicts != rhs.__isset.customdicts)
      return false;
    else if (__isset.customdicts && !(customdicts == rhs.customdicts))
      return false;
    if (__isset.sysdicts != rhs.__isset.sysdicts)
      return false;
    else if (__isset.sysdicts && !(sysdicts == rhs.sysdicts))
      return false;
    if (__isset.botsysdicts != rhs.__isset.botsysdicts)
      return false;
    else if (__isset.botsysdicts && !(botsysdicts == rhs.botsysdicts))
      return false;
    if (__isset.dictwords != rhs.__isset.dictwords)
      return false;
    else if (__isset.dictwords && !(dictwords == rhs.dictwords))
      return false;
    if (__isset.customdict != rhs.__isset.customdict)
      return false;
    else if (__isset.customdict && !(customdict == rhs.customdict))
      return false;
    if (__isset.sysdict != rhs.__isset.sysdict)
      return false;
    else if (__isset.sysdict && !(sysdict == rhs.sysdict))
      return false;
    if (__isset.botsysdict != rhs.__isset.botsysdict)
      return false;
    else if (__isset.botsysdict && !(botsysdict == rhs.botsysdict))
      return false;
    if (__isset.dictword != rhs.__isset.dictword)
      return false;
    else if (__isset.dictword && !(dictword == rhs.dictword))
      return false;
    if (__isset.intents != rhs.__isset.intents)
      return false;
    else if (__isset.intents && !(intents == rhs.intents))
      return false;
    if (__isset.slots != rhs.__isset.slots)
      return false;
    else if (__isset.slots && !(slots == rhs.slots))
      return false;
    if (__isset.utters != rhs.__isset.utters)
      return false;
    else if (__isset.utters && !(utters == rhs.utters))
      return false;
    if (__isset.intent != rhs.__isset.intent)
      return false;
    else if (__isset.intent && !(intent == rhs.intent))
      return false;
    if (__isset.slot != rhs.__isset.slot)
      return false;
    else if (__isset.slot && !(slot == rhs.slot))
      return false;
    if (__isset.utter != rhs.__isset.utter)
      return false;
    else if (__isset.utter && !(utter == rhs.utter))
      return false;
    if (__isset.devvers != rhs.__isset.devvers)
      return false;
    else if (__isset.devvers && !(devvers == rhs.devvers))
      return false;
    if (__isset.provers != rhs.__isset.provers)
      return false;
    else if (__isset.provers && !(provers == rhs.provers))
      return false;
    if (__isset.devver != rhs.__isset.devver)
      return false;
    else if (__isset.devver && !(devver == rhs.devver))
      return false;
    if (__isset.prover != rhs.__isset.prover)
      return false;
    else if (__isset.prover && !(prover == rhs.prover))
      return false;
    if (__isset.sessions != rhs.__isset.sessions)
      return false;
    else if (__isset.sessions && !(sessions == rhs.sessions))
      return false;
    if (__isset.messages != rhs.__isset.messages)
      return false;
    else if (__isset.messages && !(messages == rhs.messages))
      return false;
    if (__isset.session != rhs.__isset.session)
      return false;
    else if (__isset.session && !(session == rhs.session))
      return false;
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    if (__isset.currpage != rhs.__isset.currpage)
      return false;
    else if (__isset.currpage && !(currpage == rhs.currpage))
      return false;
    if (__isset.totalpage != rhs.__isset.totalpage)
      return false;
    else if (__isset.totalpage && !(totalpage == rhs.totalpage))
      return false;
    if (__isset.totalrows != rhs.__isset.totalrows)
      return false;
    else if (__isset.totalrows && !(totalrows == rhs.totalrows))
      return false;
    if (__isset.pagesize != rhs.__isset.pagesize)
      return false;
    else if (__isset.pagesize && !(pagesize == rhs.pagesize))
      return false;
    if (__isset.page != rhs.__isset.page)
      return false;
    else if (__isset.page && !(page == rhs.page))
      return false;
    if (__isset.query != rhs.__isset.query)
      return false;
    else if (__isset.query && !(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const Data &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Data & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Data &a, Data &b);

std::ostream& operator<<(std::ostream& out, const Data& obj);

}}} // namespace

#endif
