// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Serving.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::chatopera::bot::clause;

class ServingHandler : virtual public ServingIf {
 public:
  ServingHandler() {
    // Your initialization goes here
  }

  /**
   * 词典管理
   * 
   * @param request
   */
  void postCustomDict(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("postCustomDict\n");
  }

  void putCustomDict(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("putCustomDict\n");
  }

  void getCustomDicts(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("getCustomDicts\n");
  }

  void getCustomDict(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("getCustomDict\n");
  }

  void delCustomDict(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("delCustomDict\n");
  }

  void postSysDict(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("postSysDict\n");
  }

  void putSysDict(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("putSysDict\n");
  }

  void getSysDicts(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("getSysDicts\n");
  }

  void getSysDict(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("getSysDict\n");
  }

  void refSysDict(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("refSysDict\n");
  }

  void unrefSysDict(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("unrefSysDict\n");
  }

  void myDicts(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("myDicts\n");
  }

  void mySysdicts(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("mySysdicts\n");
  }

  void putDictWord(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("putDictWord\n");
  }

  void getDictWords(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("getDictWords\n");
  }

  void delDictWord(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("delDictWord\n");
  }

  void hasDictWord(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("hasDictWord\n");
  }

  /**
   * 意图
   * 
   * @param request
   */
  void postIntent(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("postIntent\n");
  }

  void putIntent(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("putIntent\n");
  }

  void getIntents(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("getIntents\n");
  }

  void getIntent(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("getIntent\n");
  }

  void delIntent(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("delIntent\n");
  }

  void postUtter(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("postUtter\n");
  }

  void putUtter(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("putUtter\n");
  }

  void getUtters(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("getUtters\n");
  }

  void getUtter(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("getUtter\n");
  }

  void delUtter(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("delUtter\n");
  }

  void postSlot(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("postSlot\n");
  }

  void putSlot(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("putSlot\n");
  }

  void getSlots(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("getSlots\n");
  }

  void getSlot(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("getSlot\n");
  }

  void delSlot(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("delSlot\n");
  }

  /**
   * 对话管理
   * 
   * @param request
   */
  void train(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("train\n");
  }

  void status(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("status\n");
  }

  void devver(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("devver\n");
  }

  void prover(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("prover\n");
  }

  void version(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("version\n");
  }

  void chat(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("chat\n");
  }

  void online(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("online\n");
  }

  void offline(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("offline\n");
  }

  void putSession(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("putSession\n");
  }

  void getSession(Data& _return, const Data& request) {
    // Your implementation goes here
    printf("getSession\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<ServingHandler> handler(new ServingHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new ServingProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

